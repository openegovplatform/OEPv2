/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.oep.core.datamgt.dictionary.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import org.oep.core.datamgt.dictionary.model.DictData;
import org.oep.core.datamgt.dictionary.model.DictDataModel;
import org.oep.core.datamgt.dictionary.model.DictDataSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the DictData service. Represents a row in the &quot;oep_datamgt_dictdata&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link org.oep.core.datamgt.dictionary.model.DictDataModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DictDataImpl}.
 * </p>
 *
 * @author TrungDK
 * @see DictDataImpl
 * @see org.oep.core.datamgt.dictionary.model.DictData
 * @see org.oep.core.datamgt.dictionary.model.DictDataModel
 * @generated
 */
@JSON(strict = true)
public class DictDataModelImpl extends BaseModelImpl<DictData>
	implements DictDataModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a dictionary data model instance should use the {@link org.oep.core.datamgt.dictionary.model.DictData} interface instead.
	 */
	public static final String TABLE_NAME = "oep_datamgt_dictdata";
	public static final Object[][] TABLE_COLUMNS = {
			{ "dictDataId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "collectionName", Types.VARCHAR },
			{ "dataCode", Types.VARCHAR },
			{ "node_1", Types.VARCHAR },
			{ "node_2", Types.VARCHAR },
			{ "node_3", Types.VARCHAR },
			{ "node_4", Types.VARCHAR },
			{ "node_5", Types.VARCHAR },
			{ "dataLevel", Types.INTEGER },
			{ "title", Types.VARCHAR },
			{ "description", Types.VARCHAR },
			{ "validatedFrom", Types.TIMESTAMP },
			{ "validatedTo", Types.TIMESTAMP },
			{ "status", Types.INTEGER }
		};
	public static final String TABLE_SQL_CREATE = "create table oep_datamgt_dictdata (dictDataId LONG not null primary key,companyId LONG,createDate DATE null,modifiedDate DATE null,collectionName VARCHAR(75) null,dataCode VARCHAR(75) null,node_1 VARCHAR(75) null,node_2 VARCHAR(75) null,node_3 VARCHAR(75) null,node_4 VARCHAR(75) null,node_5 VARCHAR(75) null,dataLevel INTEGER,title VARCHAR(75) null,description VARCHAR(75) null,validatedFrom DATE null,validatedTo DATE null,status INTEGER)";
	public static final String TABLE_SQL_DROP = "drop table oep_datamgt_dictdata";
	public static final String ORDER_BY_JPQL = " ORDER BY dictData.dictDataId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY oep_datamgt_dictdata.dictDataId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.org.oep.core.datamgt.dictionary.model.DictData"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.org.oep.core.datamgt.dictionary.model.DictData"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.org.oep.core.datamgt.dictionary.model.DictData"),
			true);
	public static long COLLECTIONNAME_COLUMN_BITMASK = 1L;
	public static long COMPANYID_COLUMN_BITMASK = 2L;
	public static long DATACODE_COLUMN_BITMASK = 4L;
	public static long DATALEVEL_COLUMN_BITMASK = 8L;
	public static long STATUS_COLUMN_BITMASK = 16L;
	public static long DICTDATAID_COLUMN_BITMASK = 32L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static DictData toModel(DictDataSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		DictData model = new DictDataImpl();

		model.setDictDataId(soapModel.getDictDataId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setCollectionName(soapModel.getCollectionName());
		model.setDataCode(soapModel.getDataCode());
		model.setNode_1(soapModel.getNode_1());
		model.setNode_2(soapModel.getNode_2());
		model.setNode_3(soapModel.getNode_3());
		model.setNode_4(soapModel.getNode_4());
		model.setNode_5(soapModel.getNode_5());
		model.setDataLevel(soapModel.getDataLevel());
		model.setTitle(soapModel.getTitle());
		model.setDescription(soapModel.getDescription());
		model.setValidatedFrom(soapModel.getValidatedFrom());
		model.setValidatedTo(soapModel.getValidatedTo());
		model.setStatus(soapModel.getStatus());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<DictData> toModels(DictDataSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<DictData> models = new ArrayList<DictData>(soapModels.length);

		for (DictDataSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final String MAPPING_TABLE_OEP_DATAMGT_DICTDATA2COLLECTION_NAME =
		"oep_datamgt_dictdata2collection";
	public static final Object[][] MAPPING_TABLE_OEP_DATAMGT_DICTDATA2COLLECTION_COLUMNS =
		{
			{ "dictCollectionId", Types.BIGINT },
			{ "dictDataId", Types.BIGINT }
		};
	public static final String MAPPING_TABLE_OEP_DATAMGT_DICTDATA2COLLECTION_SQL_CREATE =
		"create table oep_datamgt_dictdata2collection (dictCollectionId LONG not null,dictDataId LONG not null,primary key (dictCollectionId, dictDataId))";
	public static final boolean FINDER_CACHE_ENABLED_OEP_DATAMGT_DICTDATA2COLLECTION =
		GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.oep_datamgt_dictdata2collection"),
			true);
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.org.oep.core.datamgt.dictionary.model.DictData"));

	public DictDataModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _dictDataId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setDictDataId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _dictDataId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return DictData.class;
	}

	@Override
	public String getModelClassName() {
		return DictData.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("dictDataId", getDictDataId());
		attributes.put("companyId", getCompanyId());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("collectionName", getCollectionName());
		attributes.put("dataCode", getDataCode());
		attributes.put("node_1", getNode_1());
		attributes.put("node_2", getNode_2());
		attributes.put("node_3", getNode_3());
		attributes.put("node_4", getNode_4());
		attributes.put("node_5", getNode_5());
		attributes.put("dataLevel", getDataLevel());
		attributes.put("title", getTitle());
		attributes.put("description", getDescription());
		attributes.put("validatedFrom", getValidatedFrom());
		attributes.put("validatedTo", getValidatedTo());
		attributes.put("status", getStatus());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long dictDataId = (Long)attributes.get("dictDataId");

		if (dictDataId != null) {
			setDictDataId(dictDataId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String collectionName = (String)attributes.get("collectionName");

		if (collectionName != null) {
			setCollectionName(collectionName);
		}

		String dataCode = (String)attributes.get("dataCode");

		if (dataCode != null) {
			setDataCode(dataCode);
		}

		String node_1 = (String)attributes.get("node_1");

		if (node_1 != null) {
			setNode_1(node_1);
		}

		String node_2 = (String)attributes.get("node_2");

		if (node_2 != null) {
			setNode_2(node_2);
		}

		String node_3 = (String)attributes.get("node_3");

		if (node_3 != null) {
			setNode_3(node_3);
		}

		String node_4 = (String)attributes.get("node_4");

		if (node_4 != null) {
			setNode_4(node_4);
		}

		String node_5 = (String)attributes.get("node_5");

		if (node_5 != null) {
			setNode_5(node_5);
		}

		Integer dataLevel = (Integer)attributes.get("dataLevel");

		if (dataLevel != null) {
			setDataLevel(dataLevel);
		}

		String title = (String)attributes.get("title");

		if (title != null) {
			setTitle(title);
		}

		String description = (String)attributes.get("description");

		if (description != null) {
			setDescription(description);
		}

		Date validatedFrom = (Date)attributes.get("validatedFrom");

		if (validatedFrom != null) {
			setValidatedFrom(validatedFrom);
		}

		Date validatedTo = (Date)attributes.get("validatedTo");

		if (validatedTo != null) {
			setValidatedTo(validatedTo);
		}

		Integer status = (Integer)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}
	}

	@JSON
	@Override
	public long getDictDataId() {
		return _dictDataId;
	}

	@Override
	public void setDictDataId(long dictDataId) {
		_dictDataId = dictDataId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getCollectionName() {
		if (_collectionName == null) {
			return StringPool.BLANK;
		}
		else {
			return _collectionName;
		}
	}

	@Override
	public void setCollectionName(String collectionName) {
		_columnBitmask |= COLLECTIONNAME_COLUMN_BITMASK;

		if (_originalCollectionName == null) {
			_originalCollectionName = _collectionName;
		}

		_collectionName = collectionName;
	}

	public String getOriginalCollectionName() {
		return GetterUtil.getString(_originalCollectionName);
	}

	@JSON
	@Override
	public String getDataCode() {
		if (_dataCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _dataCode;
		}
	}

	@Override
	public void setDataCode(String dataCode) {
		_columnBitmask |= DATACODE_COLUMN_BITMASK;

		if (_originalDataCode == null) {
			_originalDataCode = _dataCode;
		}

		_dataCode = dataCode;
	}

	public String getOriginalDataCode() {
		return GetterUtil.getString(_originalDataCode);
	}

	@JSON
	@Override
	public String getNode_1() {
		if (_node_1 == null) {
			return StringPool.BLANK;
		}
		else {
			return _node_1;
		}
	}

	@Override
	public void setNode_1(String node_1) {
		_node_1 = node_1;
	}

	@JSON
	@Override
	public String getNode_2() {
		if (_node_2 == null) {
			return StringPool.BLANK;
		}
		else {
			return _node_2;
		}
	}

	@Override
	public void setNode_2(String node_2) {
		_node_2 = node_2;
	}

	@JSON
	@Override
	public String getNode_3() {
		if (_node_3 == null) {
			return StringPool.BLANK;
		}
		else {
			return _node_3;
		}
	}

	@Override
	public void setNode_3(String node_3) {
		_node_3 = node_3;
	}

	@JSON
	@Override
	public String getNode_4() {
		if (_node_4 == null) {
			return StringPool.BLANK;
		}
		else {
			return _node_4;
		}
	}

	@Override
	public void setNode_4(String node_4) {
		_node_4 = node_4;
	}

	@JSON
	@Override
	public String getNode_5() {
		if (_node_5 == null) {
			return StringPool.BLANK;
		}
		else {
			return _node_5;
		}
	}

	@Override
	public void setNode_5(String node_5) {
		_node_5 = node_5;
	}

	@JSON
	@Override
	public int getDataLevel() {
		return _dataLevel;
	}

	@Override
	public void setDataLevel(int dataLevel) {
		_columnBitmask |= DATALEVEL_COLUMN_BITMASK;

		if (!_setOriginalDataLevel) {
			_setOriginalDataLevel = true;

			_originalDataLevel = _dataLevel;
		}

		_dataLevel = dataLevel;
	}

	public int getOriginalDataLevel() {
		return _originalDataLevel;
	}

	@JSON
	@Override
	public String getTitle() {
		if (_title == null) {
			return StringPool.BLANK;
		}
		else {
			return _title;
		}
	}

	@Override
	public void setTitle(String title) {
		_title = title;
	}

	@JSON
	@Override
	public String getDescription() {
		if (_description == null) {
			return StringPool.BLANK;
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	@JSON
	@Override
	public Date getValidatedFrom() {
		return _validatedFrom;
	}

	@Override
	public void setValidatedFrom(Date validatedFrom) {
		_validatedFrom = validatedFrom;
	}

	@JSON
	@Override
	public Date getValidatedTo() {
		return _validatedTo;
	}

	@Override
	public void setValidatedTo(Date validatedTo) {
		_validatedTo = validatedTo;
	}

	@JSON
	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		_columnBitmask |= STATUS_COLUMN_BITMASK;

		if (!_setOriginalStatus) {
			_setOriginalStatus = true;

			_originalStatus = _status;
		}

		_status = status;
	}

	public int getOriginalStatus() {
		return _originalStatus;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			DictData.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public DictData toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (DictData)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		DictDataImpl dictDataImpl = new DictDataImpl();

		dictDataImpl.setDictDataId(getDictDataId());
		dictDataImpl.setCompanyId(getCompanyId());
		dictDataImpl.setCreateDate(getCreateDate());
		dictDataImpl.setModifiedDate(getModifiedDate());
		dictDataImpl.setCollectionName(getCollectionName());
		dictDataImpl.setDataCode(getDataCode());
		dictDataImpl.setNode_1(getNode_1());
		dictDataImpl.setNode_2(getNode_2());
		dictDataImpl.setNode_3(getNode_3());
		dictDataImpl.setNode_4(getNode_4());
		dictDataImpl.setNode_5(getNode_5());
		dictDataImpl.setDataLevel(getDataLevel());
		dictDataImpl.setTitle(getTitle());
		dictDataImpl.setDescription(getDescription());
		dictDataImpl.setValidatedFrom(getValidatedFrom());
		dictDataImpl.setValidatedTo(getValidatedTo());
		dictDataImpl.setStatus(getStatus());

		dictDataImpl.resetOriginalValues();

		return dictDataImpl;
	}

	@Override
	public int compareTo(DictData dictData) {
		long primaryKey = dictData.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof DictData)) {
			return false;
		}

		DictData dictData = (DictData)obj;

		long primaryKey = dictData.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		DictDataModelImpl dictDataModelImpl = this;

		dictDataModelImpl._originalCompanyId = dictDataModelImpl._companyId;

		dictDataModelImpl._setOriginalCompanyId = false;

		dictDataModelImpl._originalCollectionName = dictDataModelImpl._collectionName;

		dictDataModelImpl._originalDataCode = dictDataModelImpl._dataCode;

		dictDataModelImpl._originalDataLevel = dictDataModelImpl._dataLevel;

		dictDataModelImpl._setOriginalDataLevel = false;

		dictDataModelImpl._originalStatus = dictDataModelImpl._status;

		dictDataModelImpl._setOriginalStatus = false;

		dictDataModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<DictData> toCacheModel() {
		DictDataCacheModel dictDataCacheModel = new DictDataCacheModel();

		dictDataCacheModel.dictDataId = getDictDataId();

		dictDataCacheModel.companyId = getCompanyId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			dictDataCacheModel.createDate = createDate.getTime();
		}
		else {
			dictDataCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			dictDataCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			dictDataCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		dictDataCacheModel.collectionName = getCollectionName();

		String collectionName = dictDataCacheModel.collectionName;

		if ((collectionName != null) && (collectionName.length() == 0)) {
			dictDataCacheModel.collectionName = null;
		}

		dictDataCacheModel.dataCode = getDataCode();

		String dataCode = dictDataCacheModel.dataCode;

		if ((dataCode != null) && (dataCode.length() == 0)) {
			dictDataCacheModel.dataCode = null;
		}

		dictDataCacheModel.node_1 = getNode_1();

		String node_1 = dictDataCacheModel.node_1;

		if ((node_1 != null) && (node_1.length() == 0)) {
			dictDataCacheModel.node_1 = null;
		}

		dictDataCacheModel.node_2 = getNode_2();

		String node_2 = dictDataCacheModel.node_2;

		if ((node_2 != null) && (node_2.length() == 0)) {
			dictDataCacheModel.node_2 = null;
		}

		dictDataCacheModel.node_3 = getNode_3();

		String node_3 = dictDataCacheModel.node_3;

		if ((node_3 != null) && (node_3.length() == 0)) {
			dictDataCacheModel.node_3 = null;
		}

		dictDataCacheModel.node_4 = getNode_4();

		String node_4 = dictDataCacheModel.node_4;

		if ((node_4 != null) && (node_4.length() == 0)) {
			dictDataCacheModel.node_4 = null;
		}

		dictDataCacheModel.node_5 = getNode_5();

		String node_5 = dictDataCacheModel.node_5;

		if ((node_5 != null) && (node_5.length() == 0)) {
			dictDataCacheModel.node_5 = null;
		}

		dictDataCacheModel.dataLevel = getDataLevel();

		dictDataCacheModel.title = getTitle();

		String title = dictDataCacheModel.title;

		if ((title != null) && (title.length() == 0)) {
			dictDataCacheModel.title = null;
		}

		dictDataCacheModel.description = getDescription();

		String description = dictDataCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			dictDataCacheModel.description = null;
		}

		Date validatedFrom = getValidatedFrom();

		if (validatedFrom != null) {
			dictDataCacheModel.validatedFrom = validatedFrom.getTime();
		}
		else {
			dictDataCacheModel.validatedFrom = Long.MIN_VALUE;
		}

		Date validatedTo = getValidatedTo();

		if (validatedTo != null) {
			dictDataCacheModel.validatedTo = validatedTo.getTime();
		}
		else {
			dictDataCacheModel.validatedTo = Long.MIN_VALUE;
		}

		dictDataCacheModel.status = getStatus();

		return dictDataCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(35);

		sb.append("{dictDataId=");
		sb.append(getDictDataId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", collectionName=");
		sb.append(getCollectionName());
		sb.append(", dataCode=");
		sb.append(getDataCode());
		sb.append(", node_1=");
		sb.append(getNode_1());
		sb.append(", node_2=");
		sb.append(getNode_2());
		sb.append(", node_3=");
		sb.append(getNode_3());
		sb.append(", node_4=");
		sb.append(getNode_4());
		sb.append(", node_5=");
		sb.append(getNode_5());
		sb.append(", dataLevel=");
		sb.append(getDataLevel());
		sb.append(", title=");
		sb.append(getTitle());
		sb.append(", description=");
		sb.append(getDescription());
		sb.append(", validatedFrom=");
		sb.append(getValidatedFrom());
		sb.append(", validatedTo=");
		sb.append(getValidatedTo());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(55);

		sb.append("<model><model-name>");
		sb.append("org.oep.core.datamgt.dictionary.model.DictData");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>dictDataId</column-name><column-value><![CDATA[");
		sb.append(getDictDataId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>collectionName</column-name><column-value><![CDATA[");
		sb.append(getCollectionName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dataCode</column-name><column-value><![CDATA[");
		sb.append(getDataCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>node_1</column-name><column-value><![CDATA[");
		sb.append(getNode_1());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>node_2</column-name><column-value><![CDATA[");
		sb.append(getNode_2());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>node_3</column-name><column-value><![CDATA[");
		sb.append(getNode_3());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>node_4</column-name><column-value><![CDATA[");
		sb.append(getNode_4());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>node_5</column-name><column-value><![CDATA[");
		sb.append(getNode_5());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dataLevel</column-name><column-value><![CDATA[");
		sb.append(getDataLevel());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>title</column-name><column-value><![CDATA[");
		sb.append(getTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>validatedFrom</column-name><column-value><![CDATA[");
		sb.append(getValidatedFrom());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>validatedTo</column-name><column-value><![CDATA[");
		sb.append(getValidatedTo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = DictData.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			DictData.class
		};
	private long _dictDataId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private Date _createDate;
	private Date _modifiedDate;
	private String _collectionName;
	private String _originalCollectionName;
	private String _dataCode;
	private String _originalDataCode;
	private String _node_1;
	private String _node_2;
	private String _node_3;
	private String _node_4;
	private String _node_5;
	private int _dataLevel;
	private int _originalDataLevel;
	private boolean _setOriginalDataLevel;
	private String _title;
	private String _description;
	private Date _validatedFrom;
	private Date _validatedTo;
	private int _status;
	private int _originalStatus;
	private boolean _setOriginalStatus;
	private long _columnBitmask;
	private DictData _escapedModel;
}