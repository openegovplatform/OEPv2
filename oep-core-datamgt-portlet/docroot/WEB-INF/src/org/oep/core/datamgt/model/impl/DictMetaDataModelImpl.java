/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.oep.core.datamgt.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import org.oep.core.datamgt.model.DictMetaData;
import org.oep.core.datamgt.model.DictMetaDataModel;
import org.oep.core.datamgt.model.DictMetaDataSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the DictMetaData service. Represents a row in the &quot;oep_datamgt_dictmetadata&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link org.oep.core.datamgt.model.DictMetaDataModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DictMetaDataImpl}.
 * </p>
 *
 * @author NQMINH
 * @see DictMetaDataImpl
 * @see org.oep.core.datamgt.model.DictMetaData
 * @see org.oep.core.datamgt.model.DictMetaDataModel
 * @generated
 */
@JSON(strict = true)
public class DictMetaDataModelImpl extends BaseModelImpl<DictMetaData>
	implements DictMetaDataModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a dictionary meta data model instance should use the {@link org.oep.core.datamgt.model.DictMetaData} interface instead.
	 */
	public static final String TABLE_NAME = "oep_datamgt_dictmetadata";
	public static final Object[][] TABLE_COLUMNS = {
			{ "dictMetaDataId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "dictDataId", Types.BIGINT },
			{ "attributeName", Types.VARCHAR },
			{ "attributeValue", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table oep_datamgt_dictmetadata (dictMetaDataId LONG not null primary key,companyId LONG,groupId LONG,userId LONG,createDate DATE null,modifiedDate DATE null,dictDataId LONG,attributeName VARCHAR(75) null,attributeValue VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table oep_datamgt_dictmetadata";
	public static final String ORDER_BY_JPQL = " ORDER BY dictMetaData.dictMetaDataId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY oep_datamgt_dictmetadata.dictMetaDataId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.org.oep.core.datamgt.model.DictMetaData"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.org.oep.core.datamgt.model.DictMetaData"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.org.oep.core.datamgt.model.DictMetaData"),
			true);
	public static long ATTRIBUTENAME_COLUMN_BITMASK = 1L;
	public static long COMPANYID_COLUMN_BITMASK = 2L;
	public static long DICTDATAID_COLUMN_BITMASK = 4L;
	public static long GROUPID_COLUMN_BITMASK = 8L;
	public static long DICTMETADATAID_COLUMN_BITMASK = 16L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static DictMetaData toModel(DictMetaDataSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		DictMetaData model = new DictMetaDataImpl();

		model.setDictMetaDataId(soapModel.getDictMetaDataId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setGroupId(soapModel.getGroupId());
		model.setUserId(soapModel.getUserId());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setDictDataId(soapModel.getDictDataId());
		model.setAttributeName(soapModel.getAttributeName());
		model.setAttributeValue(soapModel.getAttributeValue());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<DictMetaData> toModels(DictMetaDataSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<DictMetaData> models = new ArrayList<DictMetaData>(soapModels.length);

		for (DictMetaDataSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.org.oep.core.datamgt.model.DictMetaData"));

	public DictMetaDataModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _dictMetaDataId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setDictMetaDataId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _dictMetaDataId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return DictMetaData.class;
	}

	@Override
	public String getModelClassName() {
		return DictMetaData.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("dictMetaDataId", getDictMetaDataId());
		attributes.put("companyId", getCompanyId());
		attributes.put("groupId", getGroupId());
		attributes.put("userId", getUserId());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("dictDataId", getDictDataId());
		attributes.put("attributeName", getAttributeName());
		attributes.put("attributeValue", getAttributeValue());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long dictMetaDataId = (Long)attributes.get("dictMetaDataId");

		if (dictMetaDataId != null) {
			setDictMetaDataId(dictMetaDataId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Long dictDataId = (Long)attributes.get("dictDataId");

		if (dictDataId != null) {
			setDictDataId(dictDataId);
		}

		String attributeName = (String)attributes.get("attributeName");

		if (attributeName != null) {
			setAttributeName(attributeName);
		}

		String attributeValue = (String)attributes.get("attributeValue");

		if (attributeValue != null) {
			setAttributeValue(attributeValue);
		}
	}

	@JSON
	@Override
	public long getDictMetaDataId() {
		return _dictMetaDataId;
	}

	@Override
	public void setDictMetaDataId(long dictMetaDataId) {
		_dictMetaDataId = dictMetaDataId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public long getDictDataId() {
		return _dictDataId;
	}

	@Override
	public void setDictDataId(long dictDataId) {
		_columnBitmask |= DICTDATAID_COLUMN_BITMASK;

		if (!_setOriginalDictDataId) {
			_setOriginalDictDataId = true;

			_originalDictDataId = _dictDataId;
		}

		_dictDataId = dictDataId;
	}

	public long getOriginalDictDataId() {
		return _originalDictDataId;
	}

	@JSON
	@Override
	public String getAttributeName() {
		if (_attributeName == null) {
			return StringPool.BLANK;
		}
		else {
			return _attributeName;
		}
	}

	@Override
	public void setAttributeName(String attributeName) {
		_columnBitmask |= ATTRIBUTENAME_COLUMN_BITMASK;

		if (_originalAttributeName == null) {
			_originalAttributeName = _attributeName;
		}

		_attributeName = attributeName;
	}

	public String getOriginalAttributeName() {
		return GetterUtil.getString(_originalAttributeName);
	}

	@JSON
	@Override
	public String getAttributeValue() {
		if (_attributeValue == null) {
			return StringPool.BLANK;
		}
		else {
			return _attributeValue;
		}
	}

	@Override
	public void setAttributeValue(String attributeValue) {
		_attributeValue = attributeValue;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			DictMetaData.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public DictMetaData toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (DictMetaData)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		DictMetaDataImpl dictMetaDataImpl = new DictMetaDataImpl();

		dictMetaDataImpl.setDictMetaDataId(getDictMetaDataId());
		dictMetaDataImpl.setCompanyId(getCompanyId());
		dictMetaDataImpl.setGroupId(getGroupId());
		dictMetaDataImpl.setUserId(getUserId());
		dictMetaDataImpl.setCreateDate(getCreateDate());
		dictMetaDataImpl.setModifiedDate(getModifiedDate());
		dictMetaDataImpl.setDictDataId(getDictDataId());
		dictMetaDataImpl.setAttributeName(getAttributeName());
		dictMetaDataImpl.setAttributeValue(getAttributeValue());

		dictMetaDataImpl.resetOriginalValues();

		return dictMetaDataImpl;
	}

	@Override
	public int compareTo(DictMetaData dictMetaData) {
		long primaryKey = dictMetaData.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof DictMetaData)) {
			return false;
		}

		DictMetaData dictMetaData = (DictMetaData)obj;

		long primaryKey = dictMetaData.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		DictMetaDataModelImpl dictMetaDataModelImpl = this;

		dictMetaDataModelImpl._originalCompanyId = dictMetaDataModelImpl._companyId;

		dictMetaDataModelImpl._setOriginalCompanyId = false;

		dictMetaDataModelImpl._originalGroupId = dictMetaDataModelImpl._groupId;

		dictMetaDataModelImpl._setOriginalGroupId = false;

		dictMetaDataModelImpl._originalDictDataId = dictMetaDataModelImpl._dictDataId;

		dictMetaDataModelImpl._setOriginalDictDataId = false;

		dictMetaDataModelImpl._originalAttributeName = dictMetaDataModelImpl._attributeName;

		dictMetaDataModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<DictMetaData> toCacheModel() {
		DictMetaDataCacheModel dictMetaDataCacheModel = new DictMetaDataCacheModel();

		dictMetaDataCacheModel.dictMetaDataId = getDictMetaDataId();

		dictMetaDataCacheModel.companyId = getCompanyId();

		dictMetaDataCacheModel.groupId = getGroupId();

		dictMetaDataCacheModel.userId = getUserId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			dictMetaDataCacheModel.createDate = createDate.getTime();
		}
		else {
			dictMetaDataCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			dictMetaDataCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			dictMetaDataCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		dictMetaDataCacheModel.dictDataId = getDictDataId();

		dictMetaDataCacheModel.attributeName = getAttributeName();

		String attributeName = dictMetaDataCacheModel.attributeName;

		if ((attributeName != null) && (attributeName.length() == 0)) {
			dictMetaDataCacheModel.attributeName = null;
		}

		dictMetaDataCacheModel.attributeValue = getAttributeValue();

		String attributeValue = dictMetaDataCacheModel.attributeValue;

		if ((attributeValue != null) && (attributeValue.length() == 0)) {
			dictMetaDataCacheModel.attributeValue = null;
		}

		return dictMetaDataCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(19);

		sb.append("{dictMetaDataId=");
		sb.append(getDictMetaDataId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", dictDataId=");
		sb.append(getDictDataId());
		sb.append(", attributeName=");
		sb.append(getAttributeName());
		sb.append(", attributeValue=");
		sb.append(getAttributeValue());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(31);

		sb.append("<model><model-name>");
		sb.append("org.oep.core.datamgt.model.DictMetaData");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>dictMetaDataId</column-name><column-value><![CDATA[");
		sb.append(getDictMetaDataId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dictDataId</column-name><column-value><![CDATA[");
		sb.append(getDictDataId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>attributeName</column-name><column-value><![CDATA[");
		sb.append(getAttributeName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>attributeValue</column-name><column-value><![CDATA[");
		sb.append(getAttributeValue());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = DictMetaData.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			DictMetaData.class
		};
	private long _dictMetaDataId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _userId;
	private String _userUuid;
	private Date _createDate;
	private Date _modifiedDate;
	private long _dictDataId;
	private long _originalDictDataId;
	private boolean _setOriginalDictDataId;
	private String _attributeName;
	private String _originalAttributeName;
	private String _attributeValue;
	private long _columnBitmask;
	private DictMetaData _escapedModel;
}