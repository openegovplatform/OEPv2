/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.oep.core.logging.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import org.oep.core.logging.model.UserActivity;
import org.oep.core.logging.model.UserActivityModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the UserActivity service. Represents a row in the &quot;oep_logging_useractivity&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link org.oep.core.logging.model.UserActivityModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link UserActivityImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see UserActivityImpl
 * @see org.oep.core.logging.model.UserActivity
 * @see org.oep.core.logging.model.UserActivityModel
 * @generated
 */
public class UserActivityModelImpl extends BaseModelImpl<UserActivity>
	implements UserActivityModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a user activity model instance should use the {@link org.oep.core.logging.model.UserActivity} interface instead.
	 */
	public static final String TABLE_NAME = "oep_logging_useractivity";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "createDate", Types.TIMESTAMP },
			{ "userName", Types.VARCHAR },
			{ "email", Types.VARCHAR },
			{ "site", Types.VARCHAR },
			{ "page", Types.VARCHAR },
			{ "action", Types.VARCHAR },
			{ "description", Types.VARCHAR },
			{ "url", Types.VARCHAR },
			{ "sessionId", Types.VARCHAR },
			{ "ip", Types.VARCHAR },
			{ "userAgent", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table oep_logging_useractivity (id LONG not null primary key,userId LONG,groupId LONG,companyId LONG,createDate DATE null,userName VARCHAR(100) null,email VARCHAR(100) null,site VARCHAR(200) null,page VARCHAR(200) null,action VARCHAR(30) null,description VARCHAR(1000) null,url VARCHAR(500) null,sessionId VARCHAR(100) null,ip VARCHAR(30) null,userAgent VARCHAR(1000) null)";
	public static final String TABLE_SQL_DROP = "drop table oep_logging_useractivity";
	public static final String ORDER_BY_JPQL = " ORDER BY userActivity.createDate DESC";
	public static final String ORDER_BY_SQL = " ORDER BY oep_logging_useractivity.createDate DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.org.oep.core.logging.model.UserActivity"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.org.oep.core.logging.model.UserActivity"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.org.oep.core.logging.model.UserActivity"),
			true);
	public static long ACTION_COLUMN_BITMASK = 1L;
	public static long CREATEDATE_COLUMN_BITMASK = 2L;
	public static long USERID_COLUMN_BITMASK = 4L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.org.oep.core.logging.model.UserActivity"));

	public UserActivityModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return UserActivity.class;
	}

	@Override
	public String getModelClassName() {
		return UserActivity.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("userId", getUserId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("createDate", getCreateDate());
		attributes.put("userName", getUserName());
		attributes.put("email", getEmail());
		attributes.put("site", getSite());
		attributes.put("page", getPage());
		attributes.put("action", getAction());
		attributes.put("description", getDescription());
		attributes.put("url", getUrl());
		attributes.put("sessionId", getSessionId());
		attributes.put("ip", getIp());
		attributes.put("userAgent", getUserAgent());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		String email = (String)attributes.get("email");

		if (email != null) {
			setEmail(email);
		}

		String site = (String)attributes.get("site");

		if (site != null) {
			setSite(site);
		}

		String page = (String)attributes.get("page");

		if (page != null) {
			setPage(page);
		}

		String action = (String)attributes.get("action");

		if (action != null) {
			setAction(action);
		}

		String description = (String)attributes.get("description");

		if (description != null) {
			setDescription(description);
		}

		String url = (String)attributes.get("url");

		if (url != null) {
			setUrl(url);
		}

		String sessionId = (String)attributes.get("sessionId");

		if (sessionId != null) {
			setSessionId(sessionId);
		}

		String ip = (String)attributes.get("ip");

		if (ip != null) {
			setIp(ip);
		}

		String userAgent = (String)attributes.get("userAgent");

		if (userAgent != null) {
			setUserAgent(userAgent);
		}
	}

	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_id = id;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_columnBitmask = -1L;

		if (_originalCreateDate == null) {
			_originalCreateDate = _createDate;
		}

		_createDate = createDate;
	}

	public Date getOriginalCreateDate() {
		return _originalCreateDate;
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@Override
	public String getEmail() {
		if (_email == null) {
			return StringPool.BLANK;
		}
		else {
			return _email;
		}
	}

	@Override
	public void setEmail(String email) {
		_email = email;
	}

	@Override
	public String getSite() {
		if (_site == null) {
			return StringPool.BLANK;
		}
		else {
			return _site;
		}
	}

	@Override
	public void setSite(String site) {
		_site = site;
	}

	@Override
	public String getPage() {
		if (_page == null) {
			return StringPool.BLANK;
		}
		else {
			return _page;
		}
	}

	@Override
	public void setPage(String page) {
		_page = page;
	}

	@Override
	public String getAction() {
		if (_action == null) {
			return StringPool.BLANK;
		}
		else {
			return _action;
		}
	}

	@Override
	public void setAction(String action) {
		_columnBitmask |= ACTION_COLUMN_BITMASK;

		if (_originalAction == null) {
			_originalAction = _action;
		}

		_action = action;
	}

	public String getOriginalAction() {
		return GetterUtil.getString(_originalAction);
	}

	@Override
	public String getDescription() {
		if (_description == null) {
			return StringPool.BLANK;
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	@Override
	public String getUrl() {
		if (_url == null) {
			return StringPool.BLANK;
		}
		else {
			return _url;
		}
	}

	@Override
	public void setUrl(String url) {
		_url = url;
	}

	@Override
	public String getSessionId() {
		if (_sessionId == null) {
			return StringPool.BLANK;
		}
		else {
			return _sessionId;
		}
	}

	@Override
	public void setSessionId(String sessionId) {
		_sessionId = sessionId;
	}

	@Override
	public String getIp() {
		if (_ip == null) {
			return StringPool.BLANK;
		}
		else {
			return _ip;
		}
	}

	@Override
	public void setIp(String ip) {
		_ip = ip;
	}

	@Override
	public String getUserAgent() {
		if (_userAgent == null) {
			return StringPool.BLANK;
		}
		else {
			return _userAgent;
		}
	}

	@Override
	public void setUserAgent(String userAgent) {
		_userAgent = userAgent;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			UserActivity.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public UserActivity toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (UserActivity)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		UserActivityImpl userActivityImpl = new UserActivityImpl();

		userActivityImpl.setId(getId());
		userActivityImpl.setUserId(getUserId());
		userActivityImpl.setGroupId(getGroupId());
		userActivityImpl.setCompanyId(getCompanyId());
		userActivityImpl.setCreateDate(getCreateDate());
		userActivityImpl.setUserName(getUserName());
		userActivityImpl.setEmail(getEmail());
		userActivityImpl.setSite(getSite());
		userActivityImpl.setPage(getPage());
		userActivityImpl.setAction(getAction());
		userActivityImpl.setDescription(getDescription());
		userActivityImpl.setUrl(getUrl());
		userActivityImpl.setSessionId(getSessionId());
		userActivityImpl.setIp(getIp());
		userActivityImpl.setUserAgent(getUserAgent());

		userActivityImpl.resetOriginalValues();

		return userActivityImpl;
	}

	@Override
	public int compareTo(UserActivity userActivity) {
		int value = 0;

		value = DateUtil.compareTo(getCreateDate(), userActivity.getCreateDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof UserActivity)) {
			return false;
		}

		UserActivity userActivity = (UserActivity)obj;

		long primaryKey = userActivity.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		UserActivityModelImpl userActivityModelImpl = this;

		userActivityModelImpl._originalUserId = userActivityModelImpl._userId;

		userActivityModelImpl._setOriginalUserId = false;

		userActivityModelImpl._originalCreateDate = userActivityModelImpl._createDate;

		userActivityModelImpl._originalAction = userActivityModelImpl._action;

		userActivityModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<UserActivity> toCacheModel() {
		UserActivityCacheModel userActivityCacheModel = new UserActivityCacheModel();

		userActivityCacheModel.id = getId();

		userActivityCacheModel.userId = getUserId();

		userActivityCacheModel.groupId = getGroupId();

		userActivityCacheModel.companyId = getCompanyId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			userActivityCacheModel.createDate = createDate.getTime();
		}
		else {
			userActivityCacheModel.createDate = Long.MIN_VALUE;
		}

		userActivityCacheModel.userName = getUserName();

		String userName = userActivityCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			userActivityCacheModel.userName = null;
		}

		userActivityCacheModel.email = getEmail();

		String email = userActivityCacheModel.email;

		if ((email != null) && (email.length() == 0)) {
			userActivityCacheModel.email = null;
		}

		userActivityCacheModel.site = getSite();

		String site = userActivityCacheModel.site;

		if ((site != null) && (site.length() == 0)) {
			userActivityCacheModel.site = null;
		}

		userActivityCacheModel.page = getPage();

		String page = userActivityCacheModel.page;

		if ((page != null) && (page.length() == 0)) {
			userActivityCacheModel.page = null;
		}

		userActivityCacheModel.action = getAction();

		String action = userActivityCacheModel.action;

		if ((action != null) && (action.length() == 0)) {
			userActivityCacheModel.action = null;
		}

		userActivityCacheModel.description = getDescription();

		String description = userActivityCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			userActivityCacheModel.description = null;
		}

		userActivityCacheModel.url = getUrl();

		String url = userActivityCacheModel.url;

		if ((url != null) && (url.length() == 0)) {
			userActivityCacheModel.url = null;
		}

		userActivityCacheModel.sessionId = getSessionId();

		String sessionId = userActivityCacheModel.sessionId;

		if ((sessionId != null) && (sessionId.length() == 0)) {
			userActivityCacheModel.sessionId = null;
		}

		userActivityCacheModel.ip = getIp();

		String ip = userActivityCacheModel.ip;

		if ((ip != null) && (ip.length() == 0)) {
			userActivityCacheModel.ip = null;
		}

		userActivityCacheModel.userAgent = getUserAgent();

		String userAgent = userActivityCacheModel.userAgent;

		if ((userAgent != null) && (userAgent.length() == 0)) {
			userActivityCacheModel.userAgent = null;
		}

		return userActivityCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(31);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", email=");
		sb.append(getEmail());
		sb.append(", site=");
		sb.append(getSite());
		sb.append(", page=");
		sb.append(getPage());
		sb.append(", action=");
		sb.append(getAction());
		sb.append(", description=");
		sb.append(getDescription());
		sb.append(", url=");
		sb.append(getUrl());
		sb.append(", sessionId=");
		sb.append(getSessionId());
		sb.append(", ip=");
		sb.append(getIp());
		sb.append(", userAgent=");
		sb.append(getUserAgent());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(49);

		sb.append("<model><model-name>");
		sb.append("org.oep.core.logging.model.UserActivity");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>email</column-name><column-value><![CDATA[");
		sb.append(getEmail());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>site</column-name><column-value><![CDATA[");
		sb.append(getSite());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>page</column-name><column-value><![CDATA[");
		sb.append(getPage());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>action</column-name><column-value><![CDATA[");
		sb.append(getAction());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>url</column-name><column-value><![CDATA[");
		sb.append(getUrl());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sessionId</column-name><column-value><![CDATA[");
		sb.append(getSessionId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ip</column-name><column-value><![CDATA[");
		sb.append(getIp());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userAgent</column-name><column-value><![CDATA[");
		sb.append(getUserAgent());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = UserActivity.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			UserActivity.class
		};
	private long _id;
	private long _userId;
	private String _userUuid;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private long _groupId;
	private long _companyId;
	private Date _createDate;
	private Date _originalCreateDate;
	private String _userName;
	private String _email;
	private String _site;
	private String _page;
	private String _action;
	private String _originalAction;
	private String _description;
	private String _url;
	private String _sessionId;
	private String _ip;
	private String _userAgent;
	private long _columnBitmask;
	private UserActivity _escapedModel;
}