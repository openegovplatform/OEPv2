/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.oep.core.processmgt.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import org.oep.core.processmgt.model.DossierProc2Role;
import org.oep.core.processmgt.model.DossierProc2RoleModel;
import org.oep.core.processmgt.model.DossierProc2RoleSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the DossierProc2Role service. Represents a row in the &quot;oep_processmgt_dossierproc2role&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link org.oep.core.processmgt.model.DossierProc2RoleModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DossierProc2RoleImpl}.
 * </p>
 *
 * @author trungdk
 * @see DossierProc2RoleImpl
 * @see org.oep.core.processmgt.model.DossierProc2Role
 * @see org.oep.core.processmgt.model.DossierProc2RoleModel
 * @generated
 */
@JSON(strict = true)
public class DossierProc2RoleModelImpl extends BaseModelImpl<DossierProc2Role>
	implements DossierProc2RoleModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a dossier proc2 role model instance should use the {@link org.oep.core.processmgt.model.DossierProc2Role} interface instead.
	 */
	public static final String TABLE_NAME = "oep_processmgt_dossierproc2role";
	public static final Object[][] TABLE_COLUMNS = {
			{ "dossierProc2RoleId", Types.BIGINT },
			{ "dossierProcId", Types.BIGINT },
			{ "roleId", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table oep_processmgt_dossierproc2role (dossierProc2RoleId LONG not null primary key,dossierProcId LONG,roleId LONG)";
	public static final String TABLE_SQL_DROP = "drop table oep_processmgt_dossierproc2role";
	public static final String ORDER_BY_JPQL = " ORDER BY dossierProc2Role.dossierProc2RoleId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY oep_processmgt_dossierproc2role.dossierProc2RoleId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.org.oep.core.processmgt.model.DossierProc2Role"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.org.oep.core.processmgt.model.DossierProc2Role"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static DossierProc2Role toModel(DossierProc2RoleSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		DossierProc2Role model = new DossierProc2RoleImpl();

		model.setDossierProc2RoleId(soapModel.getDossierProc2RoleId());
		model.setDossierProcId(soapModel.getDossierProcId());
		model.setRoleId(soapModel.getRoleId());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<DossierProc2Role> toModels(
		DossierProc2RoleSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<DossierProc2Role> models = new ArrayList<DossierProc2Role>(soapModels.length);

		for (DossierProc2RoleSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.org.oep.core.processmgt.model.DossierProc2Role"));

	public DossierProc2RoleModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _dossierProc2RoleId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setDossierProc2RoleId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _dossierProc2RoleId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return DossierProc2Role.class;
	}

	@Override
	public String getModelClassName() {
		return DossierProc2Role.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("dossierProc2RoleId", getDossierProc2RoleId());
		attributes.put("dossierProcId", getDossierProcId());
		attributes.put("roleId", getRoleId());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long dossierProc2RoleId = (Long)attributes.get("dossierProc2RoleId");

		if (dossierProc2RoleId != null) {
			setDossierProc2RoleId(dossierProc2RoleId);
		}

		Long dossierProcId = (Long)attributes.get("dossierProcId");

		if (dossierProcId != null) {
			setDossierProcId(dossierProcId);
		}

		Long roleId = (Long)attributes.get("roleId");

		if (roleId != null) {
			setRoleId(roleId);
		}
	}

	@JSON
	@Override
	public long getDossierProc2RoleId() {
		return _dossierProc2RoleId;
	}

	@Override
	public void setDossierProc2RoleId(long dossierProc2RoleId) {
		_dossierProc2RoleId = dossierProc2RoleId;
	}

	@JSON
	@Override
	public long getDossierProcId() {
		return _dossierProcId;
	}

	@Override
	public void setDossierProcId(long dossierProcId) {
		_dossierProcId = dossierProcId;
	}

	@JSON
	@Override
	public long getRoleId() {
		return _roleId;
	}

	@Override
	public void setRoleId(long roleId) {
		_roleId = roleId;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			DossierProc2Role.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public DossierProc2Role toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (DossierProc2Role)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		DossierProc2RoleImpl dossierProc2RoleImpl = new DossierProc2RoleImpl();

		dossierProc2RoleImpl.setDossierProc2RoleId(getDossierProc2RoleId());
		dossierProc2RoleImpl.setDossierProcId(getDossierProcId());
		dossierProc2RoleImpl.setRoleId(getRoleId());

		dossierProc2RoleImpl.resetOriginalValues();

		return dossierProc2RoleImpl;
	}

	@Override
	public int compareTo(DossierProc2Role dossierProc2Role) {
		long primaryKey = dossierProc2Role.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof DossierProc2Role)) {
			return false;
		}

		DossierProc2Role dossierProc2Role = (DossierProc2Role)obj;

		long primaryKey = dossierProc2Role.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<DossierProc2Role> toCacheModel() {
		DossierProc2RoleCacheModel dossierProc2RoleCacheModel = new DossierProc2RoleCacheModel();

		dossierProc2RoleCacheModel.dossierProc2RoleId = getDossierProc2RoleId();

		dossierProc2RoleCacheModel.dossierProcId = getDossierProcId();

		dossierProc2RoleCacheModel.roleId = getRoleId();

		return dossierProc2RoleCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(7);

		sb.append("{dossierProc2RoleId=");
		sb.append(getDossierProc2RoleId());
		sb.append(", dossierProcId=");
		sb.append(getDossierProcId());
		sb.append(", roleId=");
		sb.append(getRoleId());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(13);

		sb.append("<model><model-name>");
		sb.append("org.oep.core.processmgt.model.DossierProc2Role");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>dossierProc2RoleId</column-name><column-value><![CDATA[");
		sb.append(getDossierProc2RoleId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dossierProcId</column-name><column-value><![CDATA[");
		sb.append(getDossierProcId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>roleId</column-name><column-value><![CDATA[");
		sb.append(getRoleId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = DossierProc2Role.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			DossierProc2Role.class
		};
	private long _dossierProc2RoleId;
	private long _dossierProcId;
	private long _roleId;
	private DossierProc2Role _escapedModel;
}