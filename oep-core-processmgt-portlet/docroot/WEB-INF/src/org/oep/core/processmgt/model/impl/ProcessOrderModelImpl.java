/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.oep.core.processmgt.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.lar.StagedModelType;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import org.oep.core.processmgt.model.ProcessOrder;
import org.oep.core.processmgt.model.ProcessOrderModel;
import org.oep.core.processmgt.model.ProcessOrderSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the ProcessOrder service. Represents a row in the &quot;oep_processmgt_processorder&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link org.oep.core.processmgt.model.ProcessOrderModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ProcessOrderImpl}.
 * </p>
 *
 * @author trungdk
 * @see ProcessOrderImpl
 * @see org.oep.core.processmgt.model.ProcessOrder
 * @see org.oep.core.processmgt.model.ProcessOrderModel
 * @generated
 */
@JSON(strict = true)
public class ProcessOrderModelImpl extends BaseModelImpl<ProcessOrder>
	implements ProcessOrderModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a process order model instance should use the {@link org.oep.core.processmgt.model.ProcessOrder} interface instead.
	 */
	public static final String TABLE_NAME = "oep_processmgt_processorder";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "processOrderId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "organizationId", Types.BIGINT },
			{ "parentProcessOrderId", Types.BIGINT },
			{ "dossierId", Types.BIGINT },
			{ "dossierProcessId", Types.BIGINT },
			{ "dossierStepId", Types.BIGINT },
			{ "orderStatus", Types.VARCHAR },
			{ "orderResume", Types.VARCHAR },
			{ "stepDate", Types.TIMESTAMP },
			{ "stepNote", Types.VARCHAR },
			{ "assignToUserId", Types.BIGINT },
			{ "currentCondition", Types.VARCHAR },
			{ "lastStepTransitionId", Types.BIGINT },
			{ "stopRollback", Types.INTEGER },
			{ "ebPartnerShipId", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table oep_processmgt_processorder (uuid_ VARCHAR(75) null,processOrderId LONG not null primary key,userId LONG,groupId LONG,companyId LONG,createDate DATE null,modifiedDate DATE null,organizationId LONG,parentProcessOrderId LONG,dossierId LONG,dossierProcessId LONG,dossierStepId LONG,orderStatus VARCHAR(30) null,orderResume VARCHAR(200) null,stepDate DATE null,stepNote VARCHAR(200) null,assignToUserId LONG,currentCondition VARCHAR(30) null,lastStepTransitionId LONG,stopRollback INTEGER,ebPartnerShipId LONG)";
	public static final String TABLE_SQL_DROP = "drop table oep_processmgt_processorder";
	public static final String ORDER_BY_JPQL = " ORDER BY processOrder.processOrderId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY oep_processmgt_processorder.processOrderId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.org.oep.core.processmgt.model.ProcessOrder"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.org.oep.core.processmgt.model.ProcessOrder"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.org.oep.core.processmgt.model.ProcessOrder"),
			true);
	public static long COMPANYID_COLUMN_BITMASK = 1L;
	public static long GROUPID_COLUMN_BITMASK = 2L;
	public static long UUID_COLUMN_BITMASK = 4L;
	public static long PROCESSORDERID_COLUMN_BITMASK = 8L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static ProcessOrder toModel(ProcessOrderSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		ProcessOrder model = new ProcessOrderImpl();

		model.setUuid(soapModel.getUuid());
		model.setProcessOrderId(soapModel.getProcessOrderId());
		model.setUserId(soapModel.getUserId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setOrganizationId(soapModel.getOrganizationId());
		model.setParentProcessOrderId(soapModel.getParentProcessOrderId());
		model.setDossierId(soapModel.getDossierId());
		model.setDossierProcessId(soapModel.getDossierProcessId());
		model.setDossierStepId(soapModel.getDossierStepId());
		model.setOrderStatus(soapModel.getOrderStatus());
		model.setOrderResume(soapModel.getOrderResume());
		model.setStepDate(soapModel.getStepDate());
		model.setStepNote(soapModel.getStepNote());
		model.setAssignToUserId(soapModel.getAssignToUserId());
		model.setCurrentCondition(soapModel.getCurrentCondition());
		model.setLastStepTransitionId(soapModel.getLastStepTransitionId());
		model.setStopRollback(soapModel.getStopRollback());
		model.setEbPartnerShipId(soapModel.getEbPartnerShipId());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<ProcessOrder> toModels(ProcessOrderSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<ProcessOrder> models = new ArrayList<ProcessOrder>(soapModels.length);

		for (ProcessOrderSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.org.oep.core.processmgt.model.ProcessOrder"));

	public ProcessOrderModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _processOrderId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setProcessOrderId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _processOrderId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ProcessOrder.class;
	}

	@Override
	public String getModelClassName() {
		return ProcessOrder.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("processOrderId", getProcessOrderId());
		attributes.put("userId", getUserId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("organizationId", getOrganizationId());
		attributes.put("parentProcessOrderId", getParentProcessOrderId());
		attributes.put("dossierId", getDossierId());
		attributes.put("dossierProcessId", getDossierProcessId());
		attributes.put("dossierStepId", getDossierStepId());
		attributes.put("orderStatus", getOrderStatus());
		attributes.put("orderResume", getOrderResume());
		attributes.put("stepDate", getStepDate());
		attributes.put("stepNote", getStepNote());
		attributes.put("assignToUserId", getAssignToUserId());
		attributes.put("currentCondition", getCurrentCondition());
		attributes.put("lastStepTransitionId", getLastStepTransitionId());
		attributes.put("stopRollback", getStopRollback());
		attributes.put("ebPartnerShipId", getEbPartnerShipId());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long processOrderId = (Long)attributes.get("processOrderId");

		if (processOrderId != null) {
			setProcessOrderId(processOrderId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Long organizationId = (Long)attributes.get("organizationId");

		if (organizationId != null) {
			setOrganizationId(organizationId);
		}

		Long parentProcessOrderId = (Long)attributes.get("parentProcessOrderId");

		if (parentProcessOrderId != null) {
			setParentProcessOrderId(parentProcessOrderId);
		}

		Long dossierId = (Long)attributes.get("dossierId");

		if (dossierId != null) {
			setDossierId(dossierId);
		}

		Long dossierProcessId = (Long)attributes.get("dossierProcessId");

		if (dossierProcessId != null) {
			setDossierProcessId(dossierProcessId);
		}

		Long dossierStepId = (Long)attributes.get("dossierStepId");

		if (dossierStepId != null) {
			setDossierStepId(dossierStepId);
		}

		String orderStatus = (String)attributes.get("orderStatus");

		if (orderStatus != null) {
			setOrderStatus(orderStatus);
		}

		String orderResume = (String)attributes.get("orderResume");

		if (orderResume != null) {
			setOrderResume(orderResume);
		}

		Date stepDate = (Date)attributes.get("stepDate");

		if (stepDate != null) {
			setStepDate(stepDate);
		}

		String stepNote = (String)attributes.get("stepNote");

		if (stepNote != null) {
			setStepNote(stepNote);
		}

		Long assignToUserId = (Long)attributes.get("assignToUserId");

		if (assignToUserId != null) {
			setAssignToUserId(assignToUserId);
		}

		String currentCondition = (String)attributes.get("currentCondition");

		if (currentCondition != null) {
			setCurrentCondition(currentCondition);
		}

		Long lastStepTransitionId = (Long)attributes.get("lastStepTransitionId");

		if (lastStepTransitionId != null) {
			setLastStepTransitionId(lastStepTransitionId);
		}

		Integer stopRollback = (Integer)attributes.get("stopRollback");

		if (stopRollback != null) {
			setStopRollback(stopRollback);
		}

		Long ebPartnerShipId = (Long)attributes.get("ebPartnerShipId");

		if (ebPartnerShipId != null) {
			setEbPartnerShipId(ebPartnerShipId);
		}
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getProcessOrderId() {
		return _processOrderId;
	}

	@Override
	public void setProcessOrderId(long processOrderId) {
		_processOrderId = processOrderId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public long getOrganizationId() {
		return _organizationId;
	}

	@Override
	public void setOrganizationId(long organizationId) {
		_organizationId = organizationId;
	}

	@JSON
	@Override
	public long getParentProcessOrderId() {
		return _parentProcessOrderId;
	}

	@Override
	public void setParentProcessOrderId(long parentProcessOrderId) {
		_parentProcessOrderId = parentProcessOrderId;
	}

	@JSON
	@Override
	public long getDossierId() {
		return _dossierId;
	}

	@Override
	public void setDossierId(long dossierId) {
		_dossierId = dossierId;
	}

	@JSON
	@Override
	public long getDossierProcessId() {
		return _dossierProcessId;
	}

	@Override
	public void setDossierProcessId(long dossierProcessId) {
		_dossierProcessId = dossierProcessId;
	}

	@JSON
	@Override
	public long getDossierStepId() {
		return _dossierStepId;
	}

	@Override
	public void setDossierStepId(long dossierStepId) {
		_dossierStepId = dossierStepId;
	}

	@JSON
	@Override
	public String getOrderStatus() {
		if (_orderStatus == null) {
			return StringPool.BLANK;
		}
		else {
			return _orderStatus;
		}
	}

	@Override
	public void setOrderStatus(String orderStatus) {
		_orderStatus = orderStatus;
	}

	@JSON
	@Override
	public String getOrderResume() {
		if (_orderResume == null) {
			return StringPool.BLANK;
		}
		else {
			return _orderResume;
		}
	}

	@Override
	public void setOrderResume(String orderResume) {
		_orderResume = orderResume;
	}

	@JSON
	@Override
	public Date getStepDate() {
		return _stepDate;
	}

	@Override
	public void setStepDate(Date stepDate) {
		_stepDate = stepDate;
	}

	@JSON
	@Override
	public String getStepNote() {
		if (_stepNote == null) {
			return StringPool.BLANK;
		}
		else {
			return _stepNote;
		}
	}

	@Override
	public void setStepNote(String stepNote) {
		_stepNote = stepNote;
	}

	@JSON
	@Override
	public long getAssignToUserId() {
		return _assignToUserId;
	}

	@Override
	public void setAssignToUserId(long assignToUserId) {
		_assignToUserId = assignToUserId;
	}

	@Override
	public String getAssignToUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getAssignToUserId(), "uuid",
			_assignToUserUuid);
	}

	@Override
	public void setAssignToUserUuid(String assignToUserUuid) {
		_assignToUserUuid = assignToUserUuid;
	}

	@JSON
	@Override
	public String getCurrentCondition() {
		if (_currentCondition == null) {
			return StringPool.BLANK;
		}
		else {
			return _currentCondition;
		}
	}

	@Override
	public void setCurrentCondition(String currentCondition) {
		_currentCondition = currentCondition;
	}

	@JSON
	@Override
	public long getLastStepTransitionId() {
		return _lastStepTransitionId;
	}

	@Override
	public void setLastStepTransitionId(long lastStepTransitionId) {
		_lastStepTransitionId = lastStepTransitionId;
	}

	@JSON
	@Override
	public int getStopRollback() {
		return _stopRollback;
	}

	@Override
	public void setStopRollback(int stopRollback) {
		_stopRollback = stopRollback;
	}

	@JSON
	@Override
	public long getEbPartnerShipId() {
		return _ebPartnerShipId;
	}

	@Override
	public void setEbPartnerShipId(long ebPartnerShipId) {
		_ebPartnerShipId = ebPartnerShipId;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(PortalUtil.getClassNameId(
				ProcessOrder.class.getName()));
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			ProcessOrder.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ProcessOrder toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ProcessOrder)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ProcessOrderImpl processOrderImpl = new ProcessOrderImpl();

		processOrderImpl.setUuid(getUuid());
		processOrderImpl.setProcessOrderId(getProcessOrderId());
		processOrderImpl.setUserId(getUserId());
		processOrderImpl.setGroupId(getGroupId());
		processOrderImpl.setCompanyId(getCompanyId());
		processOrderImpl.setCreateDate(getCreateDate());
		processOrderImpl.setModifiedDate(getModifiedDate());
		processOrderImpl.setOrganizationId(getOrganizationId());
		processOrderImpl.setParentProcessOrderId(getParentProcessOrderId());
		processOrderImpl.setDossierId(getDossierId());
		processOrderImpl.setDossierProcessId(getDossierProcessId());
		processOrderImpl.setDossierStepId(getDossierStepId());
		processOrderImpl.setOrderStatus(getOrderStatus());
		processOrderImpl.setOrderResume(getOrderResume());
		processOrderImpl.setStepDate(getStepDate());
		processOrderImpl.setStepNote(getStepNote());
		processOrderImpl.setAssignToUserId(getAssignToUserId());
		processOrderImpl.setCurrentCondition(getCurrentCondition());
		processOrderImpl.setLastStepTransitionId(getLastStepTransitionId());
		processOrderImpl.setStopRollback(getStopRollback());
		processOrderImpl.setEbPartnerShipId(getEbPartnerShipId());

		processOrderImpl.resetOriginalValues();

		return processOrderImpl;
	}

	@Override
	public int compareTo(ProcessOrder processOrder) {
		long primaryKey = processOrder.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ProcessOrder)) {
			return false;
		}

		ProcessOrder processOrder = (ProcessOrder)obj;

		long primaryKey = processOrder.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		ProcessOrderModelImpl processOrderModelImpl = this;

		processOrderModelImpl._originalUuid = processOrderModelImpl._uuid;

		processOrderModelImpl._originalGroupId = processOrderModelImpl._groupId;

		processOrderModelImpl._setOriginalGroupId = false;

		processOrderModelImpl._originalCompanyId = processOrderModelImpl._companyId;

		processOrderModelImpl._setOriginalCompanyId = false;

		processOrderModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<ProcessOrder> toCacheModel() {
		ProcessOrderCacheModel processOrderCacheModel = new ProcessOrderCacheModel();

		processOrderCacheModel.uuid = getUuid();

		String uuid = processOrderCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			processOrderCacheModel.uuid = null;
		}

		processOrderCacheModel.processOrderId = getProcessOrderId();

		processOrderCacheModel.userId = getUserId();

		processOrderCacheModel.groupId = getGroupId();

		processOrderCacheModel.companyId = getCompanyId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			processOrderCacheModel.createDate = createDate.getTime();
		}
		else {
			processOrderCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			processOrderCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			processOrderCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		processOrderCacheModel.organizationId = getOrganizationId();

		processOrderCacheModel.parentProcessOrderId = getParentProcessOrderId();

		processOrderCacheModel.dossierId = getDossierId();

		processOrderCacheModel.dossierProcessId = getDossierProcessId();

		processOrderCacheModel.dossierStepId = getDossierStepId();

		processOrderCacheModel.orderStatus = getOrderStatus();

		String orderStatus = processOrderCacheModel.orderStatus;

		if ((orderStatus != null) && (orderStatus.length() == 0)) {
			processOrderCacheModel.orderStatus = null;
		}

		processOrderCacheModel.orderResume = getOrderResume();

		String orderResume = processOrderCacheModel.orderResume;

		if ((orderResume != null) && (orderResume.length() == 0)) {
			processOrderCacheModel.orderResume = null;
		}

		Date stepDate = getStepDate();

		if (stepDate != null) {
			processOrderCacheModel.stepDate = stepDate.getTime();
		}
		else {
			processOrderCacheModel.stepDate = Long.MIN_VALUE;
		}

		processOrderCacheModel.stepNote = getStepNote();

		String stepNote = processOrderCacheModel.stepNote;

		if ((stepNote != null) && (stepNote.length() == 0)) {
			processOrderCacheModel.stepNote = null;
		}

		processOrderCacheModel.assignToUserId = getAssignToUserId();

		processOrderCacheModel.currentCondition = getCurrentCondition();

		String currentCondition = processOrderCacheModel.currentCondition;

		if ((currentCondition != null) && (currentCondition.length() == 0)) {
			processOrderCacheModel.currentCondition = null;
		}

		processOrderCacheModel.lastStepTransitionId = getLastStepTransitionId();

		processOrderCacheModel.stopRollback = getStopRollback();

		processOrderCacheModel.ebPartnerShipId = getEbPartnerShipId();

		return processOrderCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(43);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", processOrderId=");
		sb.append(getProcessOrderId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", organizationId=");
		sb.append(getOrganizationId());
		sb.append(", parentProcessOrderId=");
		sb.append(getParentProcessOrderId());
		sb.append(", dossierId=");
		sb.append(getDossierId());
		sb.append(", dossierProcessId=");
		sb.append(getDossierProcessId());
		sb.append(", dossierStepId=");
		sb.append(getDossierStepId());
		sb.append(", orderStatus=");
		sb.append(getOrderStatus());
		sb.append(", orderResume=");
		sb.append(getOrderResume());
		sb.append(", stepDate=");
		sb.append(getStepDate());
		sb.append(", stepNote=");
		sb.append(getStepNote());
		sb.append(", assignToUserId=");
		sb.append(getAssignToUserId());
		sb.append(", currentCondition=");
		sb.append(getCurrentCondition());
		sb.append(", lastStepTransitionId=");
		sb.append(getLastStepTransitionId());
		sb.append(", stopRollback=");
		sb.append(getStopRollback());
		sb.append(", ebPartnerShipId=");
		sb.append(getEbPartnerShipId());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(67);

		sb.append("<model><model-name>");
		sb.append("org.oep.core.processmgt.model.ProcessOrder");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>processOrderId</column-name><column-value><![CDATA[");
		sb.append(getProcessOrderId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>organizationId</column-name><column-value><![CDATA[");
		sb.append(getOrganizationId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>parentProcessOrderId</column-name><column-value><![CDATA[");
		sb.append(getParentProcessOrderId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dossierId</column-name><column-value><![CDATA[");
		sb.append(getDossierId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dossierProcessId</column-name><column-value><![CDATA[");
		sb.append(getDossierProcessId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dossierStepId</column-name><column-value><![CDATA[");
		sb.append(getDossierStepId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>orderStatus</column-name><column-value><![CDATA[");
		sb.append(getOrderStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>orderResume</column-name><column-value><![CDATA[");
		sb.append(getOrderResume());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>stepDate</column-name><column-value><![CDATA[");
		sb.append(getStepDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>stepNote</column-name><column-value><![CDATA[");
		sb.append(getStepNote());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>assignToUserId</column-name><column-value><![CDATA[");
		sb.append(getAssignToUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>currentCondition</column-name><column-value><![CDATA[");
		sb.append(getCurrentCondition());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>lastStepTransitionId</column-name><column-value><![CDATA[");
		sb.append(getLastStepTransitionId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>stopRollback</column-name><column-value><![CDATA[");
		sb.append(getStopRollback());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ebPartnerShipId</column-name><column-value><![CDATA[");
		sb.append(getEbPartnerShipId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = ProcessOrder.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			ProcessOrder.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _processOrderId;
	private long _userId;
	private String _userUuid;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private Date _createDate;
	private Date _modifiedDate;
	private long _organizationId;
	private long _parentProcessOrderId;
	private long _dossierId;
	private long _dossierProcessId;
	private long _dossierStepId;
	private String _orderStatus;
	private String _orderResume;
	private Date _stepDate;
	private String _stepNote;
	private long _assignToUserId;
	private String _assignToUserUuid;
	private String _currentCondition;
	private long _lastStepTransitionId;
	private int _stopRollback;
	private long _ebPartnerShipId;
	private long _columnBitmask;
	private ProcessOrder _escapedModel;
}