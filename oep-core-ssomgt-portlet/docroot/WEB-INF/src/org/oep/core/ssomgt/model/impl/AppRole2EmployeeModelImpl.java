/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.oep.core.ssomgt.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import org.oep.core.ssomgt.model.AppRole2Employee;
import org.oep.core.ssomgt.model.AppRole2EmployeeModel;
import org.oep.core.ssomgt.model.AppRole2EmployeeSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the AppRole2Employee service. Represents a row in the &quot;oep_ssomgt_approle2employee&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link org.oep.core.ssomgt.model.AppRole2EmployeeModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AppRole2EmployeeImpl}.
 * </p>
 *
 * @author trungdk
 * @see AppRole2EmployeeImpl
 * @see org.oep.core.ssomgt.model.AppRole2Employee
 * @see org.oep.core.ssomgt.model.AppRole2EmployeeModel
 * @generated
 */
@JSON(strict = true)
public class AppRole2EmployeeModelImpl extends BaseModelImpl<AppRole2Employee>
	implements AppRole2EmployeeModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a app role2 employee model instance should use the {@link org.oep.core.ssomgt.model.AppRole2Employee} interface instead.
	 */
	public static final String TABLE_NAME = "oep_ssomgt_approle2employee";
	public static final Object[][] TABLE_COLUMNS = {
			{ "appRole2EmployeeId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "createDate", Types.TIMESTAMP },
			{ "appRoleId", Types.BIGINT },
			{ "employeeId", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table oep_ssomgt_approle2employee (appRole2EmployeeId LONG not null primary key,userId LONG,groupId LONG,companyId LONG,createDate DATE null,appRoleId LONG,employeeId LONG)";
	public static final String TABLE_SQL_DROP = "drop table oep_ssomgt_approle2employee";
	public static final String ORDER_BY_JPQL = " ORDER BY appRole2Employee.appRole2EmployeeId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY oep_ssomgt_approle2employee.appRole2EmployeeId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.org.oep.core.ssomgt.model.AppRole2Employee"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.org.oep.core.ssomgt.model.AppRole2Employee"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.org.oep.core.ssomgt.model.AppRole2Employee"),
			true);
	public static long APPROLEID_COLUMN_BITMASK = 1L;
	public static long COMPANYID_COLUMN_BITMASK = 2L;
	public static long GROUPID_COLUMN_BITMASK = 4L;
	public static long APPROLE2EMPLOYEEID_COLUMN_BITMASK = 8L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static AppRole2Employee toModel(AppRole2EmployeeSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		AppRole2Employee model = new AppRole2EmployeeImpl();

		model.setAppRole2EmployeeId(soapModel.getAppRole2EmployeeId());
		model.setUserId(soapModel.getUserId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setCreateDate(soapModel.getCreateDate());
		model.setAppRoleId(soapModel.getAppRoleId());
		model.setEmployeeId(soapModel.getEmployeeId());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<AppRole2Employee> toModels(
		AppRole2EmployeeSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<AppRole2Employee> models = new ArrayList<AppRole2Employee>(soapModels.length);

		for (AppRole2EmployeeSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.org.oep.core.ssomgt.model.AppRole2Employee"));

	public AppRole2EmployeeModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _appRole2EmployeeId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setAppRole2EmployeeId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _appRole2EmployeeId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return AppRole2Employee.class;
	}

	@Override
	public String getModelClassName() {
		return AppRole2Employee.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("appRole2EmployeeId", getAppRole2EmployeeId());
		attributes.put("userId", getUserId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("createDate", getCreateDate());
		attributes.put("appRoleId", getAppRoleId());
		attributes.put("employeeId", getEmployeeId());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long appRole2EmployeeId = (Long)attributes.get("appRole2EmployeeId");

		if (appRole2EmployeeId != null) {
			setAppRole2EmployeeId(appRole2EmployeeId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Long appRoleId = (Long)attributes.get("appRoleId");

		if (appRoleId != null) {
			setAppRoleId(appRoleId);
		}

		Long employeeId = (Long)attributes.get("employeeId");

		if (employeeId != null) {
			setEmployeeId(employeeId);
		}
	}

	@JSON
	@Override
	public long getAppRole2EmployeeId() {
		return _appRole2EmployeeId;
	}

	@Override
	public void setAppRole2EmployeeId(long appRole2EmployeeId) {
		_appRole2EmployeeId = appRole2EmployeeId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public long getAppRoleId() {
		return _appRoleId;
	}

	@Override
	public void setAppRoleId(long appRoleId) {
		_columnBitmask |= APPROLEID_COLUMN_BITMASK;

		if (!_setOriginalAppRoleId) {
			_setOriginalAppRoleId = true;

			_originalAppRoleId = _appRoleId;
		}

		_appRoleId = appRoleId;
	}

	public long getOriginalAppRoleId() {
		return _originalAppRoleId;
	}

	@JSON
	@Override
	public long getEmployeeId() {
		return _employeeId;
	}

	@Override
	public void setEmployeeId(long employeeId) {
		_employeeId = employeeId;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			AppRole2Employee.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public AppRole2Employee toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (AppRole2Employee)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		AppRole2EmployeeImpl appRole2EmployeeImpl = new AppRole2EmployeeImpl();

		appRole2EmployeeImpl.setAppRole2EmployeeId(getAppRole2EmployeeId());
		appRole2EmployeeImpl.setUserId(getUserId());
		appRole2EmployeeImpl.setGroupId(getGroupId());
		appRole2EmployeeImpl.setCompanyId(getCompanyId());
		appRole2EmployeeImpl.setCreateDate(getCreateDate());
		appRole2EmployeeImpl.setAppRoleId(getAppRoleId());
		appRole2EmployeeImpl.setEmployeeId(getEmployeeId());

		appRole2EmployeeImpl.resetOriginalValues();

		return appRole2EmployeeImpl;
	}

	@Override
	public int compareTo(AppRole2Employee appRole2Employee) {
		long primaryKey = appRole2Employee.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof AppRole2Employee)) {
			return false;
		}

		AppRole2Employee appRole2Employee = (AppRole2Employee)obj;

		long primaryKey = appRole2Employee.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		AppRole2EmployeeModelImpl appRole2EmployeeModelImpl = this;

		appRole2EmployeeModelImpl._originalGroupId = appRole2EmployeeModelImpl._groupId;

		appRole2EmployeeModelImpl._setOriginalGroupId = false;

		appRole2EmployeeModelImpl._originalCompanyId = appRole2EmployeeModelImpl._companyId;

		appRole2EmployeeModelImpl._setOriginalCompanyId = false;

		appRole2EmployeeModelImpl._originalAppRoleId = appRole2EmployeeModelImpl._appRoleId;

		appRole2EmployeeModelImpl._setOriginalAppRoleId = false;

		appRole2EmployeeModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<AppRole2Employee> toCacheModel() {
		AppRole2EmployeeCacheModel appRole2EmployeeCacheModel = new AppRole2EmployeeCacheModel();

		appRole2EmployeeCacheModel.appRole2EmployeeId = getAppRole2EmployeeId();

		appRole2EmployeeCacheModel.userId = getUserId();

		appRole2EmployeeCacheModel.groupId = getGroupId();

		appRole2EmployeeCacheModel.companyId = getCompanyId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			appRole2EmployeeCacheModel.createDate = createDate.getTime();
		}
		else {
			appRole2EmployeeCacheModel.createDate = Long.MIN_VALUE;
		}

		appRole2EmployeeCacheModel.appRoleId = getAppRoleId();

		appRole2EmployeeCacheModel.employeeId = getEmployeeId();

		return appRole2EmployeeCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(15);

		sb.append("{appRole2EmployeeId=");
		sb.append(getAppRole2EmployeeId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", appRoleId=");
		sb.append(getAppRoleId());
		sb.append(", employeeId=");
		sb.append(getEmployeeId());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(25);

		sb.append("<model><model-name>");
		sb.append("org.oep.core.ssomgt.model.AppRole2Employee");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>appRole2EmployeeId</column-name><column-value><![CDATA[");
		sb.append(getAppRole2EmployeeId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>appRoleId</column-name><column-value><![CDATA[");
		sb.append(getAppRoleId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>employeeId</column-name><column-value><![CDATA[");
		sb.append(getEmployeeId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = AppRole2Employee.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			AppRole2Employee.class
		};
	private long _appRole2EmployeeId;
	private long _userId;
	private String _userUuid;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private Date _createDate;
	private long _appRoleId;
	private long _originalAppRoleId;
	private boolean _setOriginalAppRoleId;
	private long _employeeId;
	private long _columnBitmask;
	private AppRole2Employee _escapedModel;
}