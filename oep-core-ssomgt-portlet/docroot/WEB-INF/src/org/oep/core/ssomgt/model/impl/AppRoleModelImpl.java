/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.oep.core.ssomgt.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import org.oep.core.ssomgt.model.AppRole;
import org.oep.core.ssomgt.model.AppRoleModel;
import org.oep.core.ssomgt.model.AppRoleSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the AppRole service. Represents a row in the &quot;oep_ssomgt_approle&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link org.oep.core.ssomgt.model.AppRoleModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AppRoleImpl}.
 * </p>
 *
 * @author trungdk
 * @see AppRoleImpl
 * @see org.oep.core.ssomgt.model.AppRole
 * @see org.oep.core.ssomgt.model.AppRoleModel
 * @generated
 */
@JSON(strict = true)
public class AppRoleModelImpl extends BaseModelImpl<AppRole>
	implements AppRoleModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a app role model instance should use the {@link org.oep.core.ssomgt.model.AppRole} interface instead.
	 */
	public static final String TABLE_NAME = "oep_ssomgt_approle";
	public static final Object[][] TABLE_COLUMNS = {
			{ "appRoleId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "createDate", Types.TIMESTAMP },
			{ "applicationId", Types.BIGINT },
			{ "roleCode", Types.VARCHAR },
			{ "roleName", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table oep_ssomgt_approle (appRoleId LONG not null primary key,userId LONG,groupId LONG,companyId LONG,createDate DATE null,applicationId LONG,roleCode VARCHAR(30) null,roleName VARCHAR(100) null)";
	public static final String TABLE_SQL_DROP = "drop table oep_ssomgt_approle";
	public static final String ORDER_BY_JPQL = " ORDER BY appRole.appRoleId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY oep_ssomgt_approle.appRoleId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.org.oep.core.ssomgt.model.AppRole"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.org.oep.core.ssomgt.model.AppRole"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.org.oep.core.ssomgt.model.AppRole"),
			true);
	public static long APPLICATIONID_COLUMN_BITMASK = 1L;
	public static long COMPANYID_COLUMN_BITMASK = 2L;
	public static long GROUPID_COLUMN_BITMASK = 4L;
	public static long APPROLEID_COLUMN_BITMASK = 8L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static AppRole toModel(AppRoleSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		AppRole model = new AppRoleImpl();

		model.setAppRoleId(soapModel.getAppRoleId());
		model.setUserId(soapModel.getUserId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setCreateDate(soapModel.getCreateDate());
		model.setApplicationId(soapModel.getApplicationId());
		model.setRoleCode(soapModel.getRoleCode());
		model.setRoleName(soapModel.getRoleName());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<AppRole> toModels(AppRoleSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<AppRole> models = new ArrayList<AppRole>(soapModels.length);

		for (AppRoleSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.org.oep.core.ssomgt.model.AppRole"));

	public AppRoleModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _appRoleId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setAppRoleId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _appRoleId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return AppRole.class;
	}

	@Override
	public String getModelClassName() {
		return AppRole.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("appRoleId", getAppRoleId());
		attributes.put("userId", getUserId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("createDate", getCreateDate());
		attributes.put("applicationId", getApplicationId());
		attributes.put("roleCode", getRoleCode());
		attributes.put("roleName", getRoleName());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long appRoleId = (Long)attributes.get("appRoleId");

		if (appRoleId != null) {
			setAppRoleId(appRoleId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Long applicationId = (Long)attributes.get("applicationId");

		if (applicationId != null) {
			setApplicationId(applicationId);
		}

		String roleCode = (String)attributes.get("roleCode");

		if (roleCode != null) {
			setRoleCode(roleCode);
		}

		String roleName = (String)attributes.get("roleName");

		if (roleName != null) {
			setRoleName(roleName);
		}
	}

	@JSON
	@Override
	public long getAppRoleId() {
		return _appRoleId;
	}

	@Override
	public void setAppRoleId(long appRoleId) {
		_appRoleId = appRoleId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public long getApplicationId() {
		return _applicationId;
	}

	@Override
	public void setApplicationId(long applicationId) {
		_columnBitmask |= APPLICATIONID_COLUMN_BITMASK;

		if (!_setOriginalApplicationId) {
			_setOriginalApplicationId = true;

			_originalApplicationId = _applicationId;
		}

		_applicationId = applicationId;
	}

	public long getOriginalApplicationId() {
		return _originalApplicationId;
	}

	@JSON
	@Override
	public String getRoleCode() {
		if (_roleCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _roleCode;
		}
	}

	@Override
	public void setRoleCode(String roleCode) {
		_roleCode = roleCode;
	}

	@JSON
	@Override
	public String getRoleName() {
		if (_roleName == null) {
			return StringPool.BLANK;
		}
		else {
			return _roleName;
		}
	}

	@Override
	public void setRoleName(String roleName) {
		_roleName = roleName;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			AppRole.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public AppRole toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (AppRole)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		AppRoleImpl appRoleImpl = new AppRoleImpl();

		appRoleImpl.setAppRoleId(getAppRoleId());
		appRoleImpl.setUserId(getUserId());
		appRoleImpl.setGroupId(getGroupId());
		appRoleImpl.setCompanyId(getCompanyId());
		appRoleImpl.setCreateDate(getCreateDate());
		appRoleImpl.setApplicationId(getApplicationId());
		appRoleImpl.setRoleCode(getRoleCode());
		appRoleImpl.setRoleName(getRoleName());

		appRoleImpl.resetOriginalValues();

		return appRoleImpl;
	}

	@Override
	public int compareTo(AppRole appRole) {
		long primaryKey = appRole.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof AppRole)) {
			return false;
		}

		AppRole appRole = (AppRole)obj;

		long primaryKey = appRole.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		AppRoleModelImpl appRoleModelImpl = this;

		appRoleModelImpl._originalGroupId = appRoleModelImpl._groupId;

		appRoleModelImpl._setOriginalGroupId = false;

		appRoleModelImpl._originalCompanyId = appRoleModelImpl._companyId;

		appRoleModelImpl._setOriginalCompanyId = false;

		appRoleModelImpl._originalApplicationId = appRoleModelImpl._applicationId;

		appRoleModelImpl._setOriginalApplicationId = false;

		appRoleModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<AppRole> toCacheModel() {
		AppRoleCacheModel appRoleCacheModel = new AppRoleCacheModel();

		appRoleCacheModel.appRoleId = getAppRoleId();

		appRoleCacheModel.userId = getUserId();

		appRoleCacheModel.groupId = getGroupId();

		appRoleCacheModel.companyId = getCompanyId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			appRoleCacheModel.createDate = createDate.getTime();
		}
		else {
			appRoleCacheModel.createDate = Long.MIN_VALUE;
		}

		appRoleCacheModel.applicationId = getApplicationId();

		appRoleCacheModel.roleCode = getRoleCode();

		String roleCode = appRoleCacheModel.roleCode;

		if ((roleCode != null) && (roleCode.length() == 0)) {
			appRoleCacheModel.roleCode = null;
		}

		appRoleCacheModel.roleName = getRoleName();

		String roleName = appRoleCacheModel.roleName;

		if ((roleName != null) && (roleName.length() == 0)) {
			appRoleCacheModel.roleName = null;
		}

		return appRoleCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(17);

		sb.append("{appRoleId=");
		sb.append(getAppRoleId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", applicationId=");
		sb.append(getApplicationId());
		sb.append(", roleCode=");
		sb.append(getRoleCode());
		sb.append(", roleName=");
		sb.append(getRoleName());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(28);

		sb.append("<model><model-name>");
		sb.append("org.oep.core.ssomgt.model.AppRole");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>appRoleId</column-name><column-value><![CDATA[");
		sb.append(getAppRoleId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>applicationId</column-name><column-value><![CDATA[");
		sb.append(getApplicationId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>roleCode</column-name><column-value><![CDATA[");
		sb.append(getRoleCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>roleName</column-name><column-value><![CDATA[");
		sb.append(getRoleName());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = AppRole.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			AppRole.class
		};
	private long _appRoleId;
	private long _userId;
	private String _userUuid;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private Date _createDate;
	private long _applicationId;
	private long _originalApplicationId;
	private boolean _setOriginalApplicationId;
	private String _roleCode;
	private String _roleName;
	private long _columnBitmask;
	private AppRole _escapedModel;
}