/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.oep.core.ssomgt.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import org.oep.core.ssomgt.model.Application;
import org.oep.core.ssomgt.model.ApplicationAppBigIconBlobModel;
import org.oep.core.ssomgt.model.ApplicationAppSmallIconBlobModel;
import org.oep.core.ssomgt.model.ApplicationModel;
import org.oep.core.ssomgt.model.ApplicationSoap;
import org.oep.core.ssomgt.service.ApplicationLocalServiceUtil;

import java.io.Serializable;

import java.sql.Blob;
import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Application service. Represents a row in the &quot;oep_ssomgt_application&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link org.oep.core.ssomgt.model.ApplicationModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ApplicationImpl}.
 * </p>
 *
 * @author trungdk
 * @see ApplicationImpl
 * @see org.oep.core.ssomgt.model.Application
 * @see org.oep.core.ssomgt.model.ApplicationModel
 * @generated
 */
@JSON(strict = true)
public class ApplicationModelImpl extends BaseModelImpl<Application>
	implements ApplicationModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a application model instance should use the {@link org.oep.core.ssomgt.model.Application} interface instead.
	 */
	public static final String TABLE_NAME = "oep_ssomgt_application";
	public static final Object[][] TABLE_COLUMNS = {
			{ "applicationId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "appCode", Types.VARCHAR },
			{ "appName", Types.VARCHAR },
			{ "appPin", Types.VARCHAR },
			{ "appUrl", Types.VARCHAR },
			{ "appBigIcon", Types.BLOB },
			{ "appSmallIcon", Types.BLOB },
			{ "pingTime", Types.TIMESTAMP },
			{ "sequenceNo", Types.INTEGER }
		};
	public static final String TABLE_SQL_CREATE = "create table oep_ssomgt_application (applicationId LONG not null primary key,userId LONG,groupId LONG,companyId LONG,createDate DATE null,modifiedDate DATE null,appCode VARCHAR(30) null,appName VARCHAR(100) null,appPin VARCHAR(30) null,appUrl VARCHAR(100) null,appBigIcon BLOB,appSmallIcon BLOB,pingTime DATE null,sequenceNo INTEGER)";
	public static final String TABLE_SQL_DROP = "drop table oep_ssomgt_application";
	public static final String ORDER_BY_JPQL = " ORDER BY application.sequenceNo ASC";
	public static final String ORDER_BY_SQL = " ORDER BY oep_ssomgt_application.sequenceNo ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.org.oep.core.ssomgt.model.Application"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.org.oep.core.ssomgt.model.Application"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.org.oep.core.ssomgt.model.Application"),
			true);
	public static long APPCODE_COLUMN_BITMASK = 1L;
	public static long APPPIN_COLUMN_BITMASK = 2L;
	public static long COMPANYID_COLUMN_BITMASK = 4L;
	public static long GROUPID_COLUMN_BITMASK = 8L;
	public static long SEQUENCENO_COLUMN_BITMASK = 16L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Application toModel(ApplicationSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Application model = new ApplicationImpl();

		model.setApplicationId(soapModel.getApplicationId());
		model.setUserId(soapModel.getUserId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setAppCode(soapModel.getAppCode());
		model.setAppName(soapModel.getAppName());
		model.setAppPin(soapModel.getAppPin());
		model.setAppUrl(soapModel.getAppUrl());
		model.setAppBigIcon(soapModel.getAppBigIcon());
		model.setAppSmallIcon(soapModel.getAppSmallIcon());
		model.setPingTime(soapModel.getPingTime());
		model.setSequenceNo(soapModel.getSequenceNo());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Application> toModels(ApplicationSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Application> models = new ArrayList<Application>(soapModels.length);

		for (ApplicationSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.org.oep.core.ssomgt.model.Application"));

	public ApplicationModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _applicationId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setApplicationId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _applicationId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Application.class;
	}

	@Override
	public String getModelClassName() {
		return Application.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("applicationId", getApplicationId());
		attributes.put("userId", getUserId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("appCode", getAppCode());
		attributes.put("appName", getAppName());
		attributes.put("appPin", getAppPin());
		attributes.put("appUrl", getAppUrl());
		attributes.put("appBigIcon", getAppBigIcon());
		attributes.put("appSmallIcon", getAppSmallIcon());
		attributes.put("pingTime", getPingTime());
		attributes.put("sequenceNo", getSequenceNo());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long applicationId = (Long)attributes.get("applicationId");

		if (applicationId != null) {
			setApplicationId(applicationId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String appCode = (String)attributes.get("appCode");

		if (appCode != null) {
			setAppCode(appCode);
		}

		String appName = (String)attributes.get("appName");

		if (appName != null) {
			setAppName(appName);
		}

		String appPin = (String)attributes.get("appPin");

		if (appPin != null) {
			setAppPin(appPin);
		}

		String appUrl = (String)attributes.get("appUrl");

		if (appUrl != null) {
			setAppUrl(appUrl);
		}

		Blob appBigIcon = (Blob)attributes.get("appBigIcon");

		if (appBigIcon != null) {
			setAppBigIcon(appBigIcon);
		}

		Blob appSmallIcon = (Blob)attributes.get("appSmallIcon");

		if (appSmallIcon != null) {
			setAppSmallIcon(appSmallIcon);
		}

		Date pingTime = (Date)attributes.get("pingTime");

		if (pingTime != null) {
			setPingTime(pingTime);
		}

		Integer sequenceNo = (Integer)attributes.get("sequenceNo");

		if (sequenceNo != null) {
			setSequenceNo(sequenceNo);
		}
	}

	@JSON
	@Override
	public long getApplicationId() {
		return _applicationId;
	}

	@Override
	public void setApplicationId(long applicationId) {
		_applicationId = applicationId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getAppCode() {
		if (_appCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _appCode;
		}
	}

	@Override
	public void setAppCode(String appCode) {
		_columnBitmask |= APPCODE_COLUMN_BITMASK;

		if (_originalAppCode == null) {
			_originalAppCode = _appCode;
		}

		_appCode = appCode;
	}

	public String getOriginalAppCode() {
		return GetterUtil.getString(_originalAppCode);
	}

	@JSON
	@Override
	public String getAppName() {
		if (_appName == null) {
			return StringPool.BLANK;
		}
		else {
			return _appName;
		}
	}

	@Override
	public void setAppName(String appName) {
		_appName = appName;
	}

	@JSON
	@Override
	public String getAppPin() {
		if (_appPin == null) {
			return StringPool.BLANK;
		}
		else {
			return _appPin;
		}
	}

	@Override
	public void setAppPin(String appPin) {
		_columnBitmask |= APPPIN_COLUMN_BITMASK;

		if (_originalAppPin == null) {
			_originalAppPin = _appPin;
		}

		_appPin = appPin;
	}

	public String getOriginalAppPin() {
		return GetterUtil.getString(_originalAppPin);
	}

	@JSON
	@Override
	public String getAppUrl() {
		if (_appUrl == null) {
			return StringPool.BLANK;
		}
		else {
			return _appUrl;
		}
	}

	@Override
	public void setAppUrl(String appUrl) {
		_appUrl = appUrl;
	}

	@JSON
	@Override
	public Blob getAppBigIcon() {
		if (_appBigIconBlobModel == null) {
			try {
				_appBigIconBlobModel = ApplicationLocalServiceUtil.getAppBigIconBlobModel(getPrimaryKey());
			}
			catch (Exception e) {
			}
		}

		Blob blob = null;

		if (_appBigIconBlobModel != null) {
			blob = _appBigIconBlobModel.getAppBigIconBlob();
		}

		return blob;
	}

	@Override
	public void setAppBigIcon(Blob appBigIcon) {
		if (_appBigIconBlobModel == null) {
			_appBigIconBlobModel = new ApplicationAppBigIconBlobModel(getPrimaryKey(),
					appBigIcon);
		}
		else {
			_appBigIconBlobModel.setAppBigIconBlob(appBigIcon);
		}
	}

	@JSON
	@Override
	public Blob getAppSmallIcon() {
		if (_appSmallIconBlobModel == null) {
			try {
				_appSmallIconBlobModel = ApplicationLocalServiceUtil.getAppSmallIconBlobModel(getPrimaryKey());
			}
			catch (Exception e) {
			}
		}

		Blob blob = null;

		if (_appSmallIconBlobModel != null) {
			blob = _appSmallIconBlobModel.getAppSmallIconBlob();
		}

		return blob;
	}

	@Override
	public void setAppSmallIcon(Blob appSmallIcon) {
		if (_appSmallIconBlobModel == null) {
			_appSmallIconBlobModel = new ApplicationAppSmallIconBlobModel(getPrimaryKey(),
					appSmallIcon);
		}
		else {
			_appSmallIconBlobModel.setAppSmallIconBlob(appSmallIcon);
		}
	}

	@JSON
	@Override
	public Date getPingTime() {
		return _pingTime;
	}

	@Override
	public void setPingTime(Date pingTime) {
		_pingTime = pingTime;
	}

	@JSON
	@Override
	public int getSequenceNo() {
		return _sequenceNo;
	}

	@Override
	public void setSequenceNo(int sequenceNo) {
		_columnBitmask = -1L;

		_sequenceNo = sequenceNo;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			Application.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Application toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Application)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ApplicationImpl applicationImpl = new ApplicationImpl();

		applicationImpl.setApplicationId(getApplicationId());
		applicationImpl.setUserId(getUserId());
		applicationImpl.setGroupId(getGroupId());
		applicationImpl.setCompanyId(getCompanyId());
		applicationImpl.setCreateDate(getCreateDate());
		applicationImpl.setModifiedDate(getModifiedDate());
		applicationImpl.setAppCode(getAppCode());
		applicationImpl.setAppName(getAppName());
		applicationImpl.setAppPin(getAppPin());
		applicationImpl.setAppUrl(getAppUrl());
		applicationImpl.setPingTime(getPingTime());
		applicationImpl.setSequenceNo(getSequenceNo());

		applicationImpl.resetOriginalValues();

		return applicationImpl;
	}

	@Override
	public int compareTo(Application application) {
		int value = 0;

		if (getSequenceNo() < application.getSequenceNo()) {
			value = -1;
		}
		else if (getSequenceNo() > application.getSequenceNo()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Application)) {
			return false;
		}

		Application application = (Application)obj;

		long primaryKey = application.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		ApplicationModelImpl applicationModelImpl = this;

		applicationModelImpl._originalGroupId = applicationModelImpl._groupId;

		applicationModelImpl._setOriginalGroupId = false;

		applicationModelImpl._originalCompanyId = applicationModelImpl._companyId;

		applicationModelImpl._setOriginalCompanyId = false;

		applicationModelImpl._originalAppCode = applicationModelImpl._appCode;

		applicationModelImpl._originalAppPin = applicationModelImpl._appPin;

		applicationModelImpl._appBigIconBlobModel = null;

		applicationModelImpl._appSmallIconBlobModel = null;

		applicationModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Application> toCacheModel() {
		ApplicationCacheModel applicationCacheModel = new ApplicationCacheModel();

		applicationCacheModel.applicationId = getApplicationId();

		applicationCacheModel.userId = getUserId();

		applicationCacheModel.groupId = getGroupId();

		applicationCacheModel.companyId = getCompanyId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			applicationCacheModel.createDate = createDate.getTime();
		}
		else {
			applicationCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			applicationCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			applicationCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		applicationCacheModel.appCode = getAppCode();

		String appCode = applicationCacheModel.appCode;

		if ((appCode != null) && (appCode.length() == 0)) {
			applicationCacheModel.appCode = null;
		}

		applicationCacheModel.appName = getAppName();

		String appName = applicationCacheModel.appName;

		if ((appName != null) && (appName.length() == 0)) {
			applicationCacheModel.appName = null;
		}

		applicationCacheModel.appPin = getAppPin();

		String appPin = applicationCacheModel.appPin;

		if ((appPin != null) && (appPin.length() == 0)) {
			applicationCacheModel.appPin = null;
		}

		applicationCacheModel.appUrl = getAppUrl();

		String appUrl = applicationCacheModel.appUrl;

		if ((appUrl != null) && (appUrl.length() == 0)) {
			applicationCacheModel.appUrl = null;
		}

		Date pingTime = getPingTime();

		if (pingTime != null) {
			applicationCacheModel.pingTime = pingTime.getTime();
		}
		else {
			applicationCacheModel.pingTime = Long.MIN_VALUE;
		}

		applicationCacheModel.sequenceNo = getSequenceNo();

		return applicationCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(29);

		sb.append("{applicationId=");
		sb.append(getApplicationId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", appCode=");
		sb.append(getAppCode());
		sb.append(", appName=");
		sb.append(getAppName());
		sb.append(", appPin=");
		sb.append(getAppPin());
		sb.append(", appUrl=");
		sb.append(getAppUrl());
		sb.append(", pingTime=");
		sb.append(getPingTime());
		sb.append(", sequenceNo=");
		sb.append(getSequenceNo());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(46);

		sb.append("<model><model-name>");
		sb.append("org.oep.core.ssomgt.model.Application");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>applicationId</column-name><column-value><![CDATA[");
		sb.append(getApplicationId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>appCode</column-name><column-value><![CDATA[");
		sb.append(getAppCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>appName</column-name><column-value><![CDATA[");
		sb.append(getAppName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>appPin</column-name><column-value><![CDATA[");
		sb.append(getAppPin());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>appUrl</column-name><column-value><![CDATA[");
		sb.append(getAppUrl());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>pingTime</column-name><column-value><![CDATA[");
		sb.append(getPingTime());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sequenceNo</column-name><column-value><![CDATA[");
		sb.append(getSequenceNo());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Application.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			Application.class
		};
	private long _applicationId;
	private long _userId;
	private String _userUuid;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private Date _createDate;
	private Date _modifiedDate;
	private String _appCode;
	private String _originalAppCode;
	private String _appName;
	private String _appPin;
	private String _originalAppPin;
	private String _appUrl;
	private ApplicationAppBigIconBlobModel _appBigIconBlobModel;
	private ApplicationAppSmallIconBlobModel _appSmallIconBlobModel;
	private Date _pingTime;
	private int _sequenceNo;
	private long _columnBitmask;
	private Application _escapedModel;
}