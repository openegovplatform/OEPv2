/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.oep.datamgt.service.base;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.persistence.UserPersistence;

import org.oep.datamgt.model.DictCollection;
import org.oep.datamgt.service.DictCollectionLocalService;
import org.oep.datamgt.service.persistence.DictAttributePersistence;
import org.oep.datamgt.service.persistence.DictCollectionFinder;
import org.oep.datamgt.service.persistence.DictCollectionPersistence;
import org.oep.datamgt.service.persistence.DictDataFinder;
import org.oep.datamgt.service.persistence.DictDataPersistence;
import org.oep.datamgt.service.persistence.DictMetaDataPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the dictionary collection local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link org.oep.datamgt.service.impl.DictCollectionLocalServiceImpl}.
 * </p>
 *
 * @author NQMINH
 * @see org.oep.datamgt.service.impl.DictCollectionLocalServiceImpl
 * @see org.oep.datamgt.service.DictCollectionLocalServiceUtil
 * @generated
 */
public abstract class DictCollectionLocalServiceBaseImpl
	extends BaseLocalServiceImpl implements DictCollectionLocalService,
		IdentifiableBean {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link org.oep.datamgt.service.DictCollectionLocalServiceUtil} to access the dictionary collection local service.
	 */

	/**
	 * Adds the dictionary collection to the database. Also notifies the appropriate model listeners.
	 *
	 * @param dictCollection the dictionary collection
	 * @return the dictionary collection that was added
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public DictCollection addDictCollection(DictCollection dictCollection)
		throws SystemException {
		dictCollection.setNew(true);

		return dictCollectionPersistence.update(dictCollection);
	}

	/**
	 * Creates a new dictionary collection with the primary key. Does not add the dictionary collection to the database.
	 *
	 * @param dictCollectionId the primary key for the new dictionary collection
	 * @return the new dictionary collection
	 */
	@Override
	public DictCollection createDictCollection(long dictCollectionId) {
		return dictCollectionPersistence.create(dictCollectionId);
	}

	/**
	 * Deletes the dictionary collection with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param dictCollectionId the primary key of the dictionary collection
	 * @return the dictionary collection that was removed
	 * @throws PortalException if a dictionary collection with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public DictCollection deleteDictCollection(long dictCollectionId)
		throws PortalException, SystemException {
		return dictCollectionPersistence.remove(dictCollectionId);
	}

	/**
	 * Deletes the dictionary collection from the database. Also notifies the appropriate model listeners.
	 *
	 * @param dictCollection the dictionary collection
	 * @return the dictionary collection that was removed
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public DictCollection deleteDictCollection(DictCollection dictCollection)
		throws SystemException {
		return dictCollectionPersistence.remove(dictCollection);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(DictCollection.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery)
		throws SystemException {
		return dictCollectionPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link org.oep.datamgt.model.impl.DictCollectionModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
		throws SystemException {
		return dictCollectionPersistence.findWithDynamicQuery(dynamicQuery,
			start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link org.oep.datamgt.model.impl.DictCollectionModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
		OrderByComparator orderByComparator) throws SystemException {
		return dictCollectionPersistence.findWithDynamicQuery(dynamicQuery,
			start, end, orderByComparator);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery)
		throws SystemException {
		return dictCollectionPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) throws SystemException {
		return dictCollectionPersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public DictCollection fetchDictCollection(long dictCollectionId)
		throws SystemException {
		return dictCollectionPersistence.fetchByPrimaryKey(dictCollectionId);
	}

	/**
	 * Returns the dictionary collection with the primary key.
	 *
	 * @param dictCollectionId the primary key of the dictionary collection
	 * @return the dictionary collection
	 * @throws PortalException if a dictionary collection with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public DictCollection getDictCollection(long dictCollectionId)
		throws PortalException, SystemException {
		return dictCollectionPersistence.findByPrimaryKey(dictCollectionId);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException, SystemException {
		return dictCollectionPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the dictionary collections.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link org.oep.datamgt.model.impl.DictCollectionModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of dictionary collections
	 * @param end the upper bound of the range of dictionary collections (not inclusive)
	 * @return the range of dictionary collections
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public List<DictCollection> getDictCollections(int start, int end)
		throws SystemException {
		return dictCollectionPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of dictionary collections.
	 *
	 * @return the number of dictionary collections
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public int getDictCollectionsCount() throws SystemException {
		return dictCollectionPersistence.countAll();
	}

	/**
	 * Updates the dictionary collection in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param dictCollection the dictionary collection
	 * @return the dictionary collection that was updated
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public DictCollection updateDictCollection(DictCollection dictCollection)
		throws SystemException {
		return dictCollectionPersistence.update(dictCollection);
	}

	/**
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public void addDictDataDictCollection(long dictDataId, long dictCollectionId)
		throws SystemException {
		dictDataPersistence.addDictCollection(dictDataId, dictCollectionId);
	}

	/**
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public void addDictDataDictCollection(long dictDataId,
		DictCollection dictCollection) throws SystemException {
		dictDataPersistence.addDictCollection(dictDataId, dictCollection);
	}

	/**
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public void addDictDataDictCollections(long dictDataId,
		long[] dictCollectionIds) throws SystemException {
		dictDataPersistence.addDictCollections(dictDataId, dictCollectionIds);
	}

	/**
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public void addDictDataDictCollections(long dictDataId,
		List<DictCollection> DictCollections) throws SystemException {
		dictDataPersistence.addDictCollections(dictDataId, DictCollections);
	}

	/**
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public void clearDictDataDictCollections(long dictDataId)
		throws SystemException {
		dictDataPersistence.clearDictCollections(dictDataId);
	}

	/**
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public void deleteDictDataDictCollection(long dictDataId,
		long dictCollectionId) throws SystemException {
		dictDataPersistence.removeDictCollection(dictDataId, dictCollectionId);
	}

	/**
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public void deleteDictDataDictCollection(long dictDataId,
		DictCollection dictCollection) throws SystemException {
		dictDataPersistence.removeDictCollection(dictDataId, dictCollection);
	}

	/**
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public void deleteDictDataDictCollections(long dictDataId,
		long[] dictCollectionIds) throws SystemException {
		dictDataPersistence.removeDictCollections(dictDataId, dictCollectionIds);
	}

	/**
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public void deleteDictDataDictCollections(long dictDataId,
		List<DictCollection> DictCollections) throws SystemException {
		dictDataPersistence.removeDictCollections(dictDataId, DictCollections);
	}

	/**
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public List<DictCollection> getDictDataDictCollections(long dictDataId)
		throws SystemException {
		return dictDataPersistence.getDictCollections(dictDataId);
	}

	/**
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public List<DictCollection> getDictDataDictCollections(long dictDataId,
		int start, int end) throws SystemException {
		return dictDataPersistence.getDictCollections(dictDataId, start, end);
	}

	/**
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public List<DictCollection> getDictDataDictCollections(long dictDataId,
		int start, int end, OrderByComparator orderByComparator)
		throws SystemException {
		return dictDataPersistence.getDictCollections(dictDataId, start, end,
			orderByComparator);
	}

	/**
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public int getDictDataDictCollectionsCount(long dictDataId)
		throws SystemException {
		return dictDataPersistence.getDictCollectionsSize(dictDataId);
	}

	/**
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public boolean hasDictDataDictCollection(long dictDataId,
		long dictCollectionId) throws SystemException {
		return dictDataPersistence.containsDictCollection(dictDataId,
			dictCollectionId);
	}

	/**
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public boolean hasDictDataDictCollections(long dictDataId)
		throws SystemException {
		return dictDataPersistence.containsDictCollections(dictDataId);
	}

	/**
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public void setDictDataDictCollections(long dictDataId,
		long[] dictCollectionIds) throws SystemException {
		dictDataPersistence.setDictCollections(dictDataId, dictCollectionIds);
	}

	/**
	 * Returns the dictionary attribute local service.
	 *
	 * @return the dictionary attribute local service
	 */
	public org.oep.datamgt.service.DictAttributeLocalService getDictAttributeLocalService() {
		return dictAttributeLocalService;
	}

	/**
	 * Sets the dictionary attribute local service.
	 *
	 * @param dictAttributeLocalService the dictionary attribute local service
	 */
	public void setDictAttributeLocalService(
		org.oep.datamgt.service.DictAttributeLocalService dictAttributeLocalService) {
		this.dictAttributeLocalService = dictAttributeLocalService;
	}

	/**
	 * Returns the dictionary attribute remote service.
	 *
	 * @return the dictionary attribute remote service
	 */
	public org.oep.datamgt.service.DictAttributeService getDictAttributeService() {
		return dictAttributeService;
	}

	/**
	 * Sets the dictionary attribute remote service.
	 *
	 * @param dictAttributeService the dictionary attribute remote service
	 */
	public void setDictAttributeService(
		org.oep.datamgt.service.DictAttributeService dictAttributeService) {
		this.dictAttributeService = dictAttributeService;
	}

	/**
	 * Returns the dictionary attribute persistence.
	 *
	 * @return the dictionary attribute persistence
	 */
	public DictAttributePersistence getDictAttributePersistence() {
		return dictAttributePersistence;
	}

	/**
	 * Sets the dictionary attribute persistence.
	 *
	 * @param dictAttributePersistence the dictionary attribute persistence
	 */
	public void setDictAttributePersistence(
		DictAttributePersistence dictAttributePersistence) {
		this.dictAttributePersistence = dictAttributePersistence;
	}

	/**
	 * Returns the dictionary collection local service.
	 *
	 * @return the dictionary collection local service
	 */
	public org.oep.datamgt.service.DictCollectionLocalService getDictCollectionLocalService() {
		return dictCollectionLocalService;
	}

	/**
	 * Sets the dictionary collection local service.
	 *
	 * @param dictCollectionLocalService the dictionary collection local service
	 */
	public void setDictCollectionLocalService(
		org.oep.datamgt.service.DictCollectionLocalService dictCollectionLocalService) {
		this.dictCollectionLocalService = dictCollectionLocalService;
	}

	/**
	 * Returns the dictionary collection remote service.
	 *
	 * @return the dictionary collection remote service
	 */
	public org.oep.datamgt.service.DictCollectionService getDictCollectionService() {
		return dictCollectionService;
	}

	/**
	 * Sets the dictionary collection remote service.
	 *
	 * @param dictCollectionService the dictionary collection remote service
	 */
	public void setDictCollectionService(
		org.oep.datamgt.service.DictCollectionService dictCollectionService) {
		this.dictCollectionService = dictCollectionService;
	}

	/**
	 * Returns the dictionary collection persistence.
	 *
	 * @return the dictionary collection persistence
	 */
	public DictCollectionPersistence getDictCollectionPersistence() {
		return dictCollectionPersistence;
	}

	/**
	 * Sets the dictionary collection persistence.
	 *
	 * @param dictCollectionPersistence the dictionary collection persistence
	 */
	public void setDictCollectionPersistence(
		DictCollectionPersistence dictCollectionPersistence) {
		this.dictCollectionPersistence = dictCollectionPersistence;
	}

	/**
	 * Returns the dictionary collection finder.
	 *
	 * @return the dictionary collection finder
	 */
	public DictCollectionFinder getDictCollectionFinder() {
		return dictCollectionFinder;
	}

	/**
	 * Sets the dictionary collection finder.
	 *
	 * @param dictCollectionFinder the dictionary collection finder
	 */
	public void setDictCollectionFinder(
		DictCollectionFinder dictCollectionFinder) {
		this.dictCollectionFinder = dictCollectionFinder;
	}

	/**
	 * Returns the dictionary data local service.
	 *
	 * @return the dictionary data local service
	 */
	public org.oep.datamgt.service.DictDataLocalService getDictDataLocalService() {
		return dictDataLocalService;
	}

	/**
	 * Sets the dictionary data local service.
	 *
	 * @param dictDataLocalService the dictionary data local service
	 */
	public void setDictDataLocalService(
		org.oep.datamgt.service.DictDataLocalService dictDataLocalService) {
		this.dictDataLocalService = dictDataLocalService;
	}

	/**
	 * Returns the dictionary data remote service.
	 *
	 * @return the dictionary data remote service
	 */
	public org.oep.datamgt.service.DictDataService getDictDataService() {
		return dictDataService;
	}

	/**
	 * Sets the dictionary data remote service.
	 *
	 * @param dictDataService the dictionary data remote service
	 */
	public void setDictDataService(
		org.oep.datamgt.service.DictDataService dictDataService) {
		this.dictDataService = dictDataService;
	}

	/**
	 * Returns the dictionary data persistence.
	 *
	 * @return the dictionary data persistence
	 */
	public DictDataPersistence getDictDataPersistence() {
		return dictDataPersistence;
	}

	/**
	 * Sets the dictionary data persistence.
	 *
	 * @param dictDataPersistence the dictionary data persistence
	 */
	public void setDictDataPersistence(DictDataPersistence dictDataPersistence) {
		this.dictDataPersistence = dictDataPersistence;
	}

	/**
	 * Returns the dictionary data finder.
	 *
	 * @return the dictionary data finder
	 */
	public DictDataFinder getDictDataFinder() {
		return dictDataFinder;
	}

	/**
	 * Sets the dictionary data finder.
	 *
	 * @param dictDataFinder the dictionary data finder
	 */
	public void setDictDataFinder(DictDataFinder dictDataFinder) {
		this.dictDataFinder = dictDataFinder;
	}

	/**
	 * Returns the dictionary meta data local service.
	 *
	 * @return the dictionary meta data local service
	 */
	public org.oep.datamgt.service.DictMetaDataLocalService getDictMetaDataLocalService() {
		return dictMetaDataLocalService;
	}

	/**
	 * Sets the dictionary meta data local service.
	 *
	 * @param dictMetaDataLocalService the dictionary meta data local service
	 */
	public void setDictMetaDataLocalService(
		org.oep.datamgt.service.DictMetaDataLocalService dictMetaDataLocalService) {
		this.dictMetaDataLocalService = dictMetaDataLocalService;
	}

	/**
	 * Returns the dictionary meta data remote service.
	 *
	 * @return the dictionary meta data remote service
	 */
	public org.oep.datamgt.service.DictMetaDataService getDictMetaDataService() {
		return dictMetaDataService;
	}

	/**
	 * Sets the dictionary meta data remote service.
	 *
	 * @param dictMetaDataService the dictionary meta data remote service
	 */
	public void setDictMetaDataService(
		org.oep.datamgt.service.DictMetaDataService dictMetaDataService) {
		this.dictMetaDataService = dictMetaDataService;
	}

	/**
	 * Returns the dictionary meta data persistence.
	 *
	 * @return the dictionary meta data persistence
	 */
	public DictMetaDataPersistence getDictMetaDataPersistence() {
		return dictMetaDataPersistence;
	}

	/**
	 * Sets the dictionary meta data persistence.
	 *
	 * @param dictMetaDataPersistence the dictionary meta data persistence
	 */
	public void setDictMetaDataPersistence(
		DictMetaDataPersistence dictMetaDataPersistence) {
		this.dictMetaDataPersistence = dictMetaDataPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user remote service.
	 *
	 * @return the user remote service
	 */
	public com.liferay.portal.service.UserService getUserService() {
		return userService;
	}

	/**
	 * Sets the user remote service.
	 *
	 * @param userService the user remote service
	 */
	public void setUserService(
		com.liferay.portal.service.UserService userService) {
		this.userService = userService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		Class<?> clazz = getClass();

		_classLoader = clazz.getClassLoader();

		PersistedModelLocalServiceRegistryUtil.register("org.oep.datamgt.model.DictCollection",
			dictCollectionLocalService);
	}

	public void destroy() {
		PersistedModelLocalServiceRegistryUtil.unregister(
			"org.oep.datamgt.model.DictCollection");
	}

	/**
	 * Returns the Spring bean ID for this bean.
	 *
	 * @return the Spring bean ID for this bean
	 */
	@Override
	public String getBeanIdentifier() {
		return _beanIdentifier;
	}

	/**
	 * Sets the Spring bean ID for this bean.
	 *
	 * @param beanIdentifier the Spring bean ID for this bean
	 */
	@Override
	public void setBeanIdentifier(String beanIdentifier) {
		_beanIdentifier = beanIdentifier;
	}

	@Override
	public Object invokeMethod(String name, String[] parameterTypes,
		Object[] arguments) throws Throwable {
		Thread currentThread = Thread.currentThread();

		ClassLoader contextClassLoader = currentThread.getContextClassLoader();

		if (contextClassLoader != _classLoader) {
			currentThread.setContextClassLoader(_classLoader);
		}

		try {
			return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
		}
		finally {
			if (contextClassLoader != _classLoader) {
				currentThread.setContextClassLoader(contextClassLoader);
			}
		}
	}

	protected Class<?> getModelClass() {
		return DictCollection.class;
	}

	protected String getModelClassName() {
		return DictCollection.class.getName();
	}

	/**
	 * Performs an SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) throws SystemException {
		try {
			DataSource dataSource = dictCollectionPersistence.getDataSource();

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql, new int[0]);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = org.oep.datamgt.service.DictAttributeLocalService.class)
	protected org.oep.datamgt.service.DictAttributeLocalService dictAttributeLocalService;
	@BeanReference(type = org.oep.datamgt.service.DictAttributeService.class)
	protected org.oep.datamgt.service.DictAttributeService dictAttributeService;
	@BeanReference(type = DictAttributePersistence.class)
	protected DictAttributePersistence dictAttributePersistence;
	@BeanReference(type = org.oep.datamgt.service.DictCollectionLocalService.class)
	protected org.oep.datamgt.service.DictCollectionLocalService dictCollectionLocalService;
	@BeanReference(type = org.oep.datamgt.service.DictCollectionService.class)
	protected org.oep.datamgt.service.DictCollectionService dictCollectionService;
	@BeanReference(type = DictCollectionPersistence.class)
	protected DictCollectionPersistence dictCollectionPersistence;
	@BeanReference(type = DictCollectionFinder.class)
	protected DictCollectionFinder dictCollectionFinder;
	@BeanReference(type = org.oep.datamgt.service.DictDataLocalService.class)
	protected org.oep.datamgt.service.DictDataLocalService dictDataLocalService;
	@BeanReference(type = org.oep.datamgt.service.DictDataService.class)
	protected org.oep.datamgt.service.DictDataService dictDataService;
	@BeanReference(type = DictDataPersistence.class)
	protected DictDataPersistence dictDataPersistence;
	@BeanReference(type = DictDataFinder.class)
	protected DictDataFinder dictDataFinder;
	@BeanReference(type = org.oep.datamgt.service.DictMetaDataLocalService.class)
	protected org.oep.datamgt.service.DictMetaDataLocalService dictMetaDataLocalService;
	@BeanReference(type = org.oep.datamgt.service.DictMetaDataService.class)
	protected org.oep.datamgt.service.DictMetaDataService dictMetaDataService;
	@BeanReference(type = DictMetaDataPersistence.class)
	protected DictMetaDataPersistence dictMetaDataPersistence;
	@BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
	protected com.liferay.counter.service.CounterLocalService counterLocalService;
	@BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
	protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
	@BeanReference(type = com.liferay.portal.service.UserLocalService.class)
	protected com.liferay.portal.service.UserLocalService userLocalService;
	@BeanReference(type = com.liferay.portal.service.UserService.class)
	protected com.liferay.portal.service.UserService userService;
	@BeanReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	private String _beanIdentifier;
	private ClassLoader _classLoader;
	private DictCollectionLocalServiceClpInvoker _clpInvoker = new DictCollectionLocalServiceClpInvoker();
}