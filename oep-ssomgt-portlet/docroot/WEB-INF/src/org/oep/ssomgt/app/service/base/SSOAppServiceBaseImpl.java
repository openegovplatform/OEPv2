/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.oep.ssomgt.app.service.base;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.InfrastructureUtil;
import com.liferay.portal.service.BaseServiceImpl;
import com.liferay.portal.service.persistence.UserPersistence;

import org.oep.ssomgt.app.service.SSOAppService;
import org.oep.ssomgt.service.persistence.AppMessageFinder;
import org.oep.ssomgt.service.persistence.AppMessagePersistence;
import org.oep.ssomgt.service.persistence.ApplicationFinder;
import org.oep.ssomgt.service.persistence.ApplicationPersistence;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the s s o app remote service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link org.oep.ssomgt.app.service.impl.SSOAppServiceImpl}.
 * </p>
 *
 * @author trungdk
 * @see org.oep.ssomgt.app.service.impl.SSOAppServiceImpl
 * @see org.oep.ssomgt.app.service.SSOAppServiceUtil
 * @generated
 */
public abstract class SSOAppServiceBaseImpl extends BaseServiceImpl
	implements SSOAppService, IdentifiableBean {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link org.oep.ssomgt.app.service.SSOAppServiceUtil} to access the s s o app remote service.
	 */

	/**
	 * Returns the s s o app local service.
	 *
	 * @return the s s o app local service
	 */
	public org.oep.ssomgt.app.service.SSOAppLocalService getSSOAppLocalService() {
		return ssoAppLocalService;
	}

	/**
	 * Sets the s s o app local service.
	 *
	 * @param ssoAppLocalService the s s o app local service
	 */
	public void setSSOAppLocalService(
		org.oep.ssomgt.app.service.SSOAppLocalService ssoAppLocalService) {
		this.ssoAppLocalService = ssoAppLocalService;
	}

	/**
	 * Returns the s s o app remote service.
	 *
	 * @return the s s o app remote service
	 */
	public org.oep.ssomgt.app.service.SSOAppService getSSOAppService() {
		return ssoAppService;
	}

	/**
	 * Sets the s s o app remote service.
	 *
	 * @param ssoAppService the s s o app remote service
	 */
	public void setSSOAppService(
		org.oep.ssomgt.app.service.SSOAppService ssoAppService) {
		this.ssoAppService = ssoAppService;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user remote service.
	 *
	 * @return the user remote service
	 */
	public com.liferay.portal.service.UserService getUserService() {
		return userService;
	}

	/**
	 * Sets the user remote service.
	 *
	 * @param userService the user remote service
	 */
	public void setUserService(
		com.liferay.portal.service.UserService userService) {
		this.userService = userService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	/**
	 * Returns the app message local service.
	 *
	 * @return the app message local service
	 */
	public org.oep.ssomgt.service.AppMessageLocalService getAppMessageLocalService() {
		return appMessageLocalService;
	}

	/**
	 * Sets the app message local service.
	 *
	 * @param appMessageLocalService the app message local service
	 */
	public void setAppMessageLocalService(
		org.oep.ssomgt.service.AppMessageLocalService appMessageLocalService) {
		this.appMessageLocalService = appMessageLocalService;
	}

	/**
	 * Returns the app message remote service.
	 *
	 * @return the app message remote service
	 */
	public org.oep.ssomgt.service.AppMessageService getAppMessageService() {
		return appMessageService;
	}

	/**
	 * Sets the app message remote service.
	 *
	 * @param appMessageService the app message remote service
	 */
	public void setAppMessageService(
		org.oep.ssomgt.service.AppMessageService appMessageService) {
		this.appMessageService = appMessageService;
	}

	/**
	 * Returns the app message persistence.
	 *
	 * @return the app message persistence
	 */
	public AppMessagePersistence getAppMessagePersistence() {
		return appMessagePersistence;
	}

	/**
	 * Sets the app message persistence.
	 *
	 * @param appMessagePersistence the app message persistence
	 */
	public void setAppMessagePersistence(
		AppMessagePersistence appMessagePersistence) {
		this.appMessagePersistence = appMessagePersistence;
	}

	/**
	 * Returns the app message finder.
	 *
	 * @return the app message finder
	 */
	public AppMessageFinder getAppMessageFinder() {
		return appMessageFinder;
	}

	/**
	 * Sets the app message finder.
	 *
	 * @param appMessageFinder the app message finder
	 */
	public void setAppMessageFinder(AppMessageFinder appMessageFinder) {
		this.appMessageFinder = appMessageFinder;
	}

	/**
	 * Returns the application local service.
	 *
	 * @return the application local service
	 */
	public org.oep.ssomgt.service.ApplicationLocalService getApplicationLocalService() {
		return applicationLocalService;
	}

	/**
	 * Sets the application local service.
	 *
	 * @param applicationLocalService the application local service
	 */
	public void setApplicationLocalService(
		org.oep.ssomgt.service.ApplicationLocalService applicationLocalService) {
		this.applicationLocalService = applicationLocalService;
	}

	/**
	 * Returns the application remote service.
	 *
	 * @return the application remote service
	 */
	public org.oep.ssomgt.service.ApplicationService getApplicationService() {
		return applicationService;
	}

	/**
	 * Sets the application remote service.
	 *
	 * @param applicationService the application remote service
	 */
	public void setApplicationService(
		org.oep.ssomgt.service.ApplicationService applicationService) {
		this.applicationService = applicationService;
	}

	/**
	 * Returns the application persistence.
	 *
	 * @return the application persistence
	 */
	public ApplicationPersistence getApplicationPersistence() {
		return applicationPersistence;
	}

	/**
	 * Sets the application persistence.
	 *
	 * @param applicationPersistence the application persistence
	 */
	public void setApplicationPersistence(
		ApplicationPersistence applicationPersistence) {
		this.applicationPersistence = applicationPersistence;
	}

	/**
	 * Returns the application finder.
	 *
	 * @return the application finder
	 */
	public ApplicationFinder getApplicationFinder() {
		return applicationFinder;
	}

	/**
	 * Sets the application finder.
	 *
	 * @param applicationFinder the application finder
	 */
	public void setApplicationFinder(ApplicationFinder applicationFinder) {
		this.applicationFinder = applicationFinder;
	}

	public void afterPropertiesSet() {
		Class<?> clazz = getClass();

		_classLoader = clazz.getClassLoader();
	}

	public void destroy() {
	}

	/**
	 * Returns the Spring bean ID for this bean.
	 *
	 * @return the Spring bean ID for this bean
	 */
	@Override
	public String getBeanIdentifier() {
		return _beanIdentifier;
	}

	/**
	 * Sets the Spring bean ID for this bean.
	 *
	 * @param beanIdentifier the Spring bean ID for this bean
	 */
	@Override
	public void setBeanIdentifier(String beanIdentifier) {
		_beanIdentifier = beanIdentifier;
	}

	@Override
	public Object invokeMethod(String name, String[] parameterTypes,
		Object[] arguments) throws Throwable {
		Thread currentThread = Thread.currentThread();

		ClassLoader contextClassLoader = currentThread.getContextClassLoader();

		if (contextClassLoader != _classLoader) {
			currentThread.setContextClassLoader(_classLoader);
		}

		try {
			return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
		}
		finally {
			if (contextClassLoader != _classLoader) {
				currentThread.setContextClassLoader(contextClassLoader);
			}
		}
	}

	/**
	 * Performs an SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) throws SystemException {
		try {
			DataSource dataSource = InfrastructureUtil.getDataSource();

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql, new int[0]);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = org.oep.ssomgt.app.service.SSOAppLocalService.class)
	protected org.oep.ssomgt.app.service.SSOAppLocalService ssoAppLocalService;
	@BeanReference(type = org.oep.ssomgt.app.service.SSOAppService.class)
	protected org.oep.ssomgt.app.service.SSOAppService ssoAppService;
	@BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
	protected com.liferay.counter.service.CounterLocalService counterLocalService;
	@BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
	protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
	@BeanReference(type = com.liferay.portal.service.UserLocalService.class)
	protected com.liferay.portal.service.UserLocalService userLocalService;
	@BeanReference(type = com.liferay.portal.service.UserService.class)
	protected com.liferay.portal.service.UserService userService;
	@BeanReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	@BeanReference(type = org.oep.ssomgt.service.AppMessageLocalService.class)
	protected org.oep.ssomgt.service.AppMessageLocalService appMessageLocalService;
	@BeanReference(type = org.oep.ssomgt.service.AppMessageService.class)
	protected org.oep.ssomgt.service.AppMessageService appMessageService;
	@BeanReference(type = AppMessagePersistence.class)
	protected AppMessagePersistence appMessagePersistence;
	@BeanReference(type = AppMessageFinder.class)
	protected AppMessageFinder appMessageFinder;
	@BeanReference(type = org.oep.ssomgt.service.ApplicationLocalService.class)
	protected org.oep.ssomgt.service.ApplicationLocalService applicationLocalService;
	@BeanReference(type = org.oep.ssomgt.service.ApplicationService.class)
	protected org.oep.ssomgt.service.ApplicationService applicationService;
	@BeanReference(type = ApplicationPersistence.class)
	protected ApplicationPersistence applicationPersistence;
	@BeanReference(type = ApplicationFinder.class)
	protected ApplicationFinder applicationFinder;
	private String _beanIdentifier;
	private ClassLoader _classLoader;
	private SSOAppServiceClpInvoker _clpInvoker = new SSOAppServiceClpInvoker();
}