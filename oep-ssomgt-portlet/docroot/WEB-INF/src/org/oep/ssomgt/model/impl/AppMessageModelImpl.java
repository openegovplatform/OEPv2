/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.oep.ssomgt.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import org.oep.ssomgt.model.AppMessage;
import org.oep.ssomgt.model.AppMessageModel;
import org.oep.ssomgt.model.AppMessageSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the AppMessage service. Represents a row in the &quot;oep_usermgt_appmessage&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link org.oep.ssomgt.model.AppMessageModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AppMessageImpl}.
 * </p>
 *
 * @author trungdk
 * @see AppMessageImpl
 * @see org.oep.ssomgt.model.AppMessage
 * @see org.oep.ssomgt.model.AppMessageModel
 * @generated
 */
@JSON(strict = true)
public class AppMessageModelImpl extends BaseModelImpl<AppMessage>
	implements AppMessageModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a app message model instance should use the {@link org.oep.ssomgt.model.AppMessage} interface instead.
	 */
	public static final String TABLE_NAME = "oep_usermgt_appmessage";
	public static final Object[][] TABLE_COLUMNS = {
			{ "appMessageId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "createDate", Types.TIMESTAMP },
			{ "fromApplication", Types.VARCHAR },
			{ "toUser", Types.VARCHAR },
			{ "messageType", Types.VARCHAR },
			{ "messageCode", Types.VARCHAR },
			{ "messageText", Types.VARCHAR },
			{ "messageValue", Types.VARCHAR },
			{ "messageUrl", Types.VARCHAR },
			{ "visitDate", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table oep_usermgt_appmessage (appMessageId LONG not null primary key,userId LONG,groupId LONG,companyId LONG,createDate DATE null,fromApplication VARCHAR(30) null,toUser VARCHAR(30) null,messageType VARCHAR(30) null,messageCode VARCHAR(30) null,messageText VARCHAR(200) null,messageValue VARCHAR(200) null,messageUrl VARCHAR(200) null,visitDate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table oep_usermgt_appmessage";
	public static final String ORDER_BY_JPQL = " ORDER BY appMessage.appMessageId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY oep_usermgt_appmessage.appMessageId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.org.oep.ssomgt.model.AppMessage"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.org.oep.ssomgt.model.AppMessage"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.org.oep.ssomgt.model.AppMessage"),
			true);
	public static long FROMAPPLICATION_COLUMN_BITMASK = 1L;
	public static long TOUSER_COLUMN_BITMASK = 2L;
	public static long APPMESSAGEID_COLUMN_BITMASK = 4L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static AppMessage toModel(AppMessageSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		AppMessage model = new AppMessageImpl();

		model.setAppMessageId(soapModel.getAppMessageId());
		model.setUserId(soapModel.getUserId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setCreateDate(soapModel.getCreateDate());
		model.setFromApplication(soapModel.getFromApplication());
		model.setToUser(soapModel.getToUser());
		model.setMessageType(soapModel.getMessageType());
		model.setMessageCode(soapModel.getMessageCode());
		model.setMessageText(soapModel.getMessageText());
		model.setMessageValue(soapModel.getMessageValue());
		model.setMessageUrl(soapModel.getMessageUrl());
		model.setVisitDate(soapModel.getVisitDate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<AppMessage> toModels(AppMessageSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<AppMessage> models = new ArrayList<AppMessage>(soapModels.length);

		for (AppMessageSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.org.oep.ssomgt.model.AppMessage"));

	public AppMessageModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _appMessageId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setAppMessageId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _appMessageId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return AppMessage.class;
	}

	@Override
	public String getModelClassName() {
		return AppMessage.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("appMessageId", getAppMessageId());
		attributes.put("userId", getUserId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("createDate", getCreateDate());
		attributes.put("fromApplication", getFromApplication());
		attributes.put("toUser", getToUser());
		attributes.put("messageType", getMessageType());
		attributes.put("messageCode", getMessageCode());
		attributes.put("messageText", getMessageText());
		attributes.put("messageValue", getMessageValue());
		attributes.put("messageUrl", getMessageUrl());
		attributes.put("visitDate", getVisitDate());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long appMessageId = (Long)attributes.get("appMessageId");

		if (appMessageId != null) {
			setAppMessageId(appMessageId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		String fromApplication = (String)attributes.get("fromApplication");

		if (fromApplication != null) {
			setFromApplication(fromApplication);
		}

		String toUser = (String)attributes.get("toUser");

		if (toUser != null) {
			setToUser(toUser);
		}

		String messageType = (String)attributes.get("messageType");

		if (messageType != null) {
			setMessageType(messageType);
		}

		String messageCode = (String)attributes.get("messageCode");

		if (messageCode != null) {
			setMessageCode(messageCode);
		}

		String messageText = (String)attributes.get("messageText");

		if (messageText != null) {
			setMessageText(messageText);
		}

		String messageValue = (String)attributes.get("messageValue");

		if (messageValue != null) {
			setMessageValue(messageValue);
		}

		String messageUrl = (String)attributes.get("messageUrl");

		if (messageUrl != null) {
			setMessageUrl(messageUrl);
		}

		Date visitDate = (Date)attributes.get("visitDate");

		if (visitDate != null) {
			setVisitDate(visitDate);
		}
	}

	@JSON
	@Override
	public long getAppMessageId() {
		return _appMessageId;
	}

	@Override
	public void setAppMessageId(long appMessageId) {
		_appMessageId = appMessageId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public String getFromApplication() {
		if (_fromApplication == null) {
			return StringPool.BLANK;
		}
		else {
			return _fromApplication;
		}
	}

	@Override
	public void setFromApplication(String fromApplication) {
		_columnBitmask |= FROMAPPLICATION_COLUMN_BITMASK;

		if (_originalFromApplication == null) {
			_originalFromApplication = _fromApplication;
		}

		_fromApplication = fromApplication;
	}

	public String getOriginalFromApplication() {
		return GetterUtil.getString(_originalFromApplication);
	}

	@JSON
	@Override
	public String getToUser() {
		if (_toUser == null) {
			return StringPool.BLANK;
		}
		else {
			return _toUser;
		}
	}

	@Override
	public void setToUser(String toUser) {
		_columnBitmask |= TOUSER_COLUMN_BITMASK;

		if (_originalToUser == null) {
			_originalToUser = _toUser;
		}

		_toUser = toUser;
	}

	public String getOriginalToUser() {
		return GetterUtil.getString(_originalToUser);
	}

	@JSON
	@Override
	public String getMessageType() {
		if (_messageType == null) {
			return StringPool.BLANK;
		}
		else {
			return _messageType;
		}
	}

	@Override
	public void setMessageType(String messageType) {
		_messageType = messageType;
	}

	@JSON
	@Override
	public String getMessageCode() {
		if (_messageCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _messageCode;
		}
	}

	@Override
	public void setMessageCode(String messageCode) {
		_messageCode = messageCode;
	}

	@JSON
	@Override
	public String getMessageText() {
		if (_messageText == null) {
			return StringPool.BLANK;
		}
		else {
			return _messageText;
		}
	}

	@Override
	public void setMessageText(String messageText) {
		_messageText = messageText;
	}

	@JSON
	@Override
	public String getMessageValue() {
		if (_messageValue == null) {
			return StringPool.BLANK;
		}
		else {
			return _messageValue;
		}
	}

	@Override
	public void setMessageValue(String messageValue) {
		_messageValue = messageValue;
	}

	@JSON
	@Override
	public String getMessageUrl() {
		if (_messageUrl == null) {
			return StringPool.BLANK;
		}
		else {
			return _messageUrl;
		}
	}

	@Override
	public void setMessageUrl(String messageUrl) {
		_messageUrl = messageUrl;
	}

	@JSON
	@Override
	public Date getVisitDate() {
		return _visitDate;
	}

	@Override
	public void setVisitDate(Date visitDate) {
		_visitDate = visitDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			AppMessage.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public AppMessage toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (AppMessage)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		AppMessageImpl appMessageImpl = new AppMessageImpl();

		appMessageImpl.setAppMessageId(getAppMessageId());
		appMessageImpl.setUserId(getUserId());
		appMessageImpl.setGroupId(getGroupId());
		appMessageImpl.setCompanyId(getCompanyId());
		appMessageImpl.setCreateDate(getCreateDate());
		appMessageImpl.setFromApplication(getFromApplication());
		appMessageImpl.setToUser(getToUser());
		appMessageImpl.setMessageType(getMessageType());
		appMessageImpl.setMessageCode(getMessageCode());
		appMessageImpl.setMessageText(getMessageText());
		appMessageImpl.setMessageValue(getMessageValue());
		appMessageImpl.setMessageUrl(getMessageUrl());
		appMessageImpl.setVisitDate(getVisitDate());

		appMessageImpl.resetOriginalValues();

		return appMessageImpl;
	}

	@Override
	public int compareTo(AppMessage appMessage) {
		long primaryKey = appMessage.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof AppMessage)) {
			return false;
		}

		AppMessage appMessage = (AppMessage)obj;

		long primaryKey = appMessage.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		AppMessageModelImpl appMessageModelImpl = this;

		appMessageModelImpl._originalFromApplication = appMessageModelImpl._fromApplication;

		appMessageModelImpl._originalToUser = appMessageModelImpl._toUser;

		appMessageModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<AppMessage> toCacheModel() {
		AppMessageCacheModel appMessageCacheModel = new AppMessageCacheModel();

		appMessageCacheModel.appMessageId = getAppMessageId();

		appMessageCacheModel.userId = getUserId();

		appMessageCacheModel.groupId = getGroupId();

		appMessageCacheModel.companyId = getCompanyId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			appMessageCacheModel.createDate = createDate.getTime();
		}
		else {
			appMessageCacheModel.createDate = Long.MIN_VALUE;
		}

		appMessageCacheModel.fromApplication = getFromApplication();

		String fromApplication = appMessageCacheModel.fromApplication;

		if ((fromApplication != null) && (fromApplication.length() == 0)) {
			appMessageCacheModel.fromApplication = null;
		}

		appMessageCacheModel.toUser = getToUser();

		String toUser = appMessageCacheModel.toUser;

		if ((toUser != null) && (toUser.length() == 0)) {
			appMessageCacheModel.toUser = null;
		}

		appMessageCacheModel.messageType = getMessageType();

		String messageType = appMessageCacheModel.messageType;

		if ((messageType != null) && (messageType.length() == 0)) {
			appMessageCacheModel.messageType = null;
		}

		appMessageCacheModel.messageCode = getMessageCode();

		String messageCode = appMessageCacheModel.messageCode;

		if ((messageCode != null) && (messageCode.length() == 0)) {
			appMessageCacheModel.messageCode = null;
		}

		appMessageCacheModel.messageText = getMessageText();

		String messageText = appMessageCacheModel.messageText;

		if ((messageText != null) && (messageText.length() == 0)) {
			appMessageCacheModel.messageText = null;
		}

		appMessageCacheModel.messageValue = getMessageValue();

		String messageValue = appMessageCacheModel.messageValue;

		if ((messageValue != null) && (messageValue.length() == 0)) {
			appMessageCacheModel.messageValue = null;
		}

		appMessageCacheModel.messageUrl = getMessageUrl();

		String messageUrl = appMessageCacheModel.messageUrl;

		if ((messageUrl != null) && (messageUrl.length() == 0)) {
			appMessageCacheModel.messageUrl = null;
		}

		Date visitDate = getVisitDate();

		if (visitDate != null) {
			appMessageCacheModel.visitDate = visitDate.getTime();
		}
		else {
			appMessageCacheModel.visitDate = Long.MIN_VALUE;
		}

		return appMessageCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(27);

		sb.append("{appMessageId=");
		sb.append(getAppMessageId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", fromApplication=");
		sb.append(getFromApplication());
		sb.append(", toUser=");
		sb.append(getToUser());
		sb.append(", messageType=");
		sb.append(getMessageType());
		sb.append(", messageCode=");
		sb.append(getMessageCode());
		sb.append(", messageText=");
		sb.append(getMessageText());
		sb.append(", messageValue=");
		sb.append(getMessageValue());
		sb.append(", messageUrl=");
		sb.append(getMessageUrl());
		sb.append(", visitDate=");
		sb.append(getVisitDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(43);

		sb.append("<model><model-name>");
		sb.append("org.oep.ssomgt.model.AppMessage");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>appMessageId</column-name><column-value><![CDATA[");
		sb.append(getAppMessageId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fromApplication</column-name><column-value><![CDATA[");
		sb.append(getFromApplication());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>toUser</column-name><column-value><![CDATA[");
		sb.append(getToUser());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>messageType</column-name><column-value><![CDATA[");
		sb.append(getMessageType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>messageCode</column-name><column-value><![CDATA[");
		sb.append(getMessageCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>messageText</column-name><column-value><![CDATA[");
		sb.append(getMessageText());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>messageValue</column-name><column-value><![CDATA[");
		sb.append(getMessageValue());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>messageUrl</column-name><column-value><![CDATA[");
		sb.append(getMessageUrl());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>visitDate</column-name><column-value><![CDATA[");
		sb.append(getVisitDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = AppMessage.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			AppMessage.class
		};
	private long _appMessageId;
	private long _userId;
	private String _userUuid;
	private long _groupId;
	private long _companyId;
	private Date _createDate;
	private String _fromApplication;
	private String _originalFromApplication;
	private String _toUser;
	private String _originalToUser;
	private String _messageType;
	private String _messageCode;
	private String _messageText;
	private String _messageValue;
	private String _messageUrl;
	private Date _visitDate;
	private long _columnBitmask;
	private AppMessage _escapedModel;
}