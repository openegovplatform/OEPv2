/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.oep.usermgt.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import org.oep.usermgt.model.Delegacy;
import org.oep.usermgt.model.DelegacyModel;
import org.oep.usermgt.model.DelegacySoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Delegacy service. Represents a row in the &quot;oep_usermgt_delegacy&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link org.oep.usermgt.model.DelegacyModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DelegacyImpl}.
 * </p>
 *
 * @author NQMINH
 * @see DelegacyImpl
 * @see org.oep.usermgt.model.Delegacy
 * @see org.oep.usermgt.model.DelegacyModel
 * @generated
 */
@JSON(strict = true)
public class DelegacyModelImpl extends BaseModelImpl<Delegacy>
	implements DelegacyModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a delegacy model instance should use the {@link org.oep.usermgt.model.Delegacy} interface instead.
	 */
	public static final String TABLE_NAME = "oep_usermgt_delegacy";
	public static final Object[][] TABLE_COLUMNS = {
			{ "delegacyId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "createDate", Types.TIMESTAMP },
			{ "fromEmployeeId", Types.BIGINT },
			{ "toEmployeeId", Types.BIGINT },
			{ "roleId", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table oep_usermgt_delegacy (delegacyId LONG not null primary key,companyId LONG,groupId LONG,userId LONG,createDate DATE null,fromEmployeeId LONG,toEmployeeId LONG,roleId LONG)";
	public static final String TABLE_SQL_DROP = "drop table oep_usermgt_delegacy";
	public static final String ORDER_BY_JPQL = " ORDER BY delegacy.delegacyId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY oep_usermgt_delegacy.delegacyId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.org.oep.usermgt.model.Delegacy"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.org.oep.usermgt.model.Delegacy"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.org.oep.usermgt.model.Delegacy"),
			true);
	public static long FROMEMPLOYEEID_COLUMN_BITMASK = 1L;
	public static long ROLEID_COLUMN_BITMASK = 2L;
	public static long TOEMPLOYEEID_COLUMN_BITMASK = 4L;
	public static long DELEGACYID_COLUMN_BITMASK = 8L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Delegacy toModel(DelegacySoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Delegacy model = new DelegacyImpl();

		model.setDelegacyId(soapModel.getDelegacyId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setGroupId(soapModel.getGroupId());
		model.setUserId(soapModel.getUserId());
		model.setCreateDate(soapModel.getCreateDate());
		model.setFromEmployeeId(soapModel.getFromEmployeeId());
		model.setToEmployeeId(soapModel.getToEmployeeId());
		model.setRoleId(soapModel.getRoleId());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Delegacy> toModels(DelegacySoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Delegacy> models = new ArrayList<Delegacy>(soapModels.length);

		for (DelegacySoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.org.oep.usermgt.model.Delegacy"));

	public DelegacyModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _delegacyId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setDelegacyId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _delegacyId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Delegacy.class;
	}

	@Override
	public String getModelClassName() {
		return Delegacy.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("delegacyId", getDelegacyId());
		attributes.put("companyId", getCompanyId());
		attributes.put("groupId", getGroupId());
		attributes.put("userId", getUserId());
		attributes.put("createDate", getCreateDate());
		attributes.put("fromEmployeeId", getFromEmployeeId());
		attributes.put("toEmployeeId", getToEmployeeId());
		attributes.put("roleId", getRoleId());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long delegacyId = (Long)attributes.get("delegacyId");

		if (delegacyId != null) {
			setDelegacyId(delegacyId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Long fromEmployeeId = (Long)attributes.get("fromEmployeeId");

		if (fromEmployeeId != null) {
			setFromEmployeeId(fromEmployeeId);
		}

		Long toEmployeeId = (Long)attributes.get("toEmployeeId");

		if (toEmployeeId != null) {
			setToEmployeeId(toEmployeeId);
		}

		Long roleId = (Long)attributes.get("roleId");

		if (roleId != null) {
			setRoleId(roleId);
		}
	}

	@JSON
	@Override
	public long getDelegacyId() {
		return _delegacyId;
	}

	@Override
	public void setDelegacyId(long delegacyId) {
		_delegacyId = delegacyId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public long getFromEmployeeId() {
		return _fromEmployeeId;
	}

	@Override
	public void setFromEmployeeId(long fromEmployeeId) {
		_columnBitmask |= FROMEMPLOYEEID_COLUMN_BITMASK;

		if (!_setOriginalFromEmployeeId) {
			_setOriginalFromEmployeeId = true;

			_originalFromEmployeeId = _fromEmployeeId;
		}

		_fromEmployeeId = fromEmployeeId;
	}

	public long getOriginalFromEmployeeId() {
		return _originalFromEmployeeId;
	}

	@JSON
	@Override
	public long getToEmployeeId() {
		return _toEmployeeId;
	}

	@Override
	public void setToEmployeeId(long toEmployeeId) {
		_columnBitmask |= TOEMPLOYEEID_COLUMN_BITMASK;

		if (!_setOriginalToEmployeeId) {
			_setOriginalToEmployeeId = true;

			_originalToEmployeeId = _toEmployeeId;
		}

		_toEmployeeId = toEmployeeId;
	}

	public long getOriginalToEmployeeId() {
		return _originalToEmployeeId;
	}

	@JSON
	@Override
	public long getRoleId() {
		return _roleId;
	}

	@Override
	public void setRoleId(long roleId) {
		_columnBitmask |= ROLEID_COLUMN_BITMASK;

		if (!_setOriginalRoleId) {
			_setOriginalRoleId = true;

			_originalRoleId = _roleId;
		}

		_roleId = roleId;
	}

	public long getOriginalRoleId() {
		return _originalRoleId;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			Delegacy.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Delegacy toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Delegacy)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		DelegacyImpl delegacyImpl = new DelegacyImpl();

		delegacyImpl.setDelegacyId(getDelegacyId());
		delegacyImpl.setCompanyId(getCompanyId());
		delegacyImpl.setGroupId(getGroupId());
		delegacyImpl.setUserId(getUserId());
		delegacyImpl.setCreateDate(getCreateDate());
		delegacyImpl.setFromEmployeeId(getFromEmployeeId());
		delegacyImpl.setToEmployeeId(getToEmployeeId());
		delegacyImpl.setRoleId(getRoleId());

		delegacyImpl.resetOriginalValues();

		return delegacyImpl;
	}

	@Override
	public int compareTo(Delegacy delegacy) {
		long primaryKey = delegacy.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Delegacy)) {
			return false;
		}

		Delegacy delegacy = (Delegacy)obj;

		long primaryKey = delegacy.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		DelegacyModelImpl delegacyModelImpl = this;

		delegacyModelImpl._originalFromEmployeeId = delegacyModelImpl._fromEmployeeId;

		delegacyModelImpl._setOriginalFromEmployeeId = false;

		delegacyModelImpl._originalToEmployeeId = delegacyModelImpl._toEmployeeId;

		delegacyModelImpl._setOriginalToEmployeeId = false;

		delegacyModelImpl._originalRoleId = delegacyModelImpl._roleId;

		delegacyModelImpl._setOriginalRoleId = false;

		delegacyModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Delegacy> toCacheModel() {
		DelegacyCacheModel delegacyCacheModel = new DelegacyCacheModel();

		delegacyCacheModel.delegacyId = getDelegacyId();

		delegacyCacheModel.companyId = getCompanyId();

		delegacyCacheModel.groupId = getGroupId();

		delegacyCacheModel.userId = getUserId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			delegacyCacheModel.createDate = createDate.getTime();
		}
		else {
			delegacyCacheModel.createDate = Long.MIN_VALUE;
		}

		delegacyCacheModel.fromEmployeeId = getFromEmployeeId();

		delegacyCacheModel.toEmployeeId = getToEmployeeId();

		delegacyCacheModel.roleId = getRoleId();

		return delegacyCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(17);

		sb.append("{delegacyId=");
		sb.append(getDelegacyId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", fromEmployeeId=");
		sb.append(getFromEmployeeId());
		sb.append(", toEmployeeId=");
		sb.append(getToEmployeeId());
		sb.append(", roleId=");
		sb.append(getRoleId());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(28);

		sb.append("<model><model-name>");
		sb.append("org.oep.usermgt.model.Delegacy");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>delegacyId</column-name><column-value><![CDATA[");
		sb.append(getDelegacyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fromEmployeeId</column-name><column-value><![CDATA[");
		sb.append(getFromEmployeeId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>toEmployeeId</column-name><column-value><![CDATA[");
		sb.append(getToEmployeeId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>roleId</column-name><column-value><![CDATA[");
		sb.append(getRoleId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Delegacy.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			Delegacy.class
		};
	private long _delegacyId;
	private long _companyId;
	private long _groupId;
	private long _userId;
	private String _userUuid;
	private Date _createDate;
	private long _fromEmployeeId;
	private long _originalFromEmployeeId;
	private boolean _setOriginalFromEmployeeId;
	private long _toEmployeeId;
	private long _originalToEmployeeId;
	private boolean _setOriginalToEmployeeId;
	private long _roleId;
	private long _originalRoleId;
	private boolean _setOriginalRoleId;
	private long _columnBitmask;
	private Delegacy _escapedModel;
}