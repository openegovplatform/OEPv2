/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.oep.core.dossiermgt.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.lar.StagedModelType;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import org.oep.core.dossiermgt.model.DossierFolder;
import org.oep.core.dossiermgt.model.DossierFolderModel;
import org.oep.core.dossiermgt.model.DossierFolderSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the DossierFolder service. Represents a row in the &quot;oep_dossiermgt_DossierFolder&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link org.oep.core.dossiermgt.model.DossierFolderModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DossierFolderImpl}.
 * </p>
 *
 * @author trungdk
 * @see DossierFolderImpl
 * @see org.oep.core.dossiermgt.model.DossierFolder
 * @see org.oep.core.dossiermgt.model.DossierFolderModel
 * @generated
 */
@JSON(strict = true)
public class DossierFolderModelImpl extends BaseModelImpl<DossierFolder>
	implements DossierFolderModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a dossier folder model instance should use the {@link org.oep.core.dossiermgt.model.DossierFolder} interface instead.
	 */
	public static final String TABLE_NAME = "oep_dossiermgt_DossierFolder";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "dossierFolderId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "folderName", Types.VARCHAR },
			{ "parentFolderId", Types.BIGINT },
			{ "sequenceNo", Types.INTEGER },
			{ "procedureFilter", Types.VARCHAR },
			{ "statusFilter", Types.VARCHAR },
			{ "filterByOrganization", Types.INTEGER },
			{ "filterByUser", Types.INTEGER }
		};
	public static final String TABLE_SQL_CREATE = "create table oep_dossiermgt_DossierFolder (uuid_ VARCHAR(75) null,dossierFolderId LONG not null primary key,companyId LONG,createDate DATE null,modifiedDate DATE null,folderName VARCHAR(75) null,parentFolderId LONG,sequenceNo INTEGER,procedureFilter VARCHAR(75) null,statusFilter VARCHAR(75) null,filterByOrganization INTEGER,filterByUser INTEGER)";
	public static final String TABLE_SQL_DROP = "drop table oep_dossiermgt_DossierFolder";
	public static final String ORDER_BY_JPQL = " ORDER BY dossierFolder.dossierFolderId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY oep_dossiermgt_DossierFolder.dossierFolderId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.org.oep.core.dossiermgt.model.DossierFolder"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.org.oep.core.dossiermgt.model.DossierFolder"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.org.oep.core.dossiermgt.model.DossierFolder"),
			true);
	public static long COMPANYID_COLUMN_BITMASK = 1L;
	public static long UUID_COLUMN_BITMASK = 2L;
	public static long DOSSIERFOLDERID_COLUMN_BITMASK = 4L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static DossierFolder toModel(DossierFolderSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		DossierFolder model = new DossierFolderImpl();

		model.setUuid(soapModel.getUuid());
		model.setDossierFolderId(soapModel.getDossierFolderId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setFolderName(soapModel.getFolderName());
		model.setParentFolderId(soapModel.getParentFolderId());
		model.setSequenceNo(soapModel.getSequenceNo());
		model.setProcedureFilter(soapModel.getProcedureFilter());
		model.setStatusFilter(soapModel.getStatusFilter());
		model.setFilterByOrganization(soapModel.getFilterByOrganization());
		model.setFilterByUser(soapModel.getFilterByUser());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<DossierFolder> toModels(DossierFolderSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<DossierFolder> models = new ArrayList<DossierFolder>(soapModels.length);

		for (DossierFolderSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.org.oep.core.dossiermgt.model.DossierFolder"));

	public DossierFolderModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _dossierFolderId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setDossierFolderId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _dossierFolderId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return DossierFolder.class;
	}

	@Override
	public String getModelClassName() {
		return DossierFolder.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("dossierFolderId", getDossierFolderId());
		attributes.put("companyId", getCompanyId());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("folderName", getFolderName());
		attributes.put("parentFolderId", getParentFolderId());
		attributes.put("sequenceNo", getSequenceNo());
		attributes.put("procedureFilter", getProcedureFilter());
		attributes.put("statusFilter", getStatusFilter());
		attributes.put("filterByOrganization", getFilterByOrganization());
		attributes.put("filterByUser", getFilterByUser());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long dossierFolderId = (Long)attributes.get("dossierFolderId");

		if (dossierFolderId != null) {
			setDossierFolderId(dossierFolderId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String folderName = (String)attributes.get("folderName");

		if (folderName != null) {
			setFolderName(folderName);
		}

		Long parentFolderId = (Long)attributes.get("parentFolderId");

		if (parentFolderId != null) {
			setParentFolderId(parentFolderId);
		}

		Integer sequenceNo = (Integer)attributes.get("sequenceNo");

		if (sequenceNo != null) {
			setSequenceNo(sequenceNo);
		}

		String procedureFilter = (String)attributes.get("procedureFilter");

		if (procedureFilter != null) {
			setProcedureFilter(procedureFilter);
		}

		String statusFilter = (String)attributes.get("statusFilter");

		if (statusFilter != null) {
			setStatusFilter(statusFilter);
		}

		Integer filterByOrganization = (Integer)attributes.get(
				"filterByOrganization");

		if (filterByOrganization != null) {
			setFilterByOrganization(filterByOrganization);
		}

		Integer filterByUser = (Integer)attributes.get("filterByUser");

		if (filterByUser != null) {
			setFilterByUser(filterByUser);
		}
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getDossierFolderId() {
		return _dossierFolderId;
	}

	@Override
	public void setDossierFolderId(long dossierFolderId) {
		_dossierFolderId = dossierFolderId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getFolderName() {
		if (_folderName == null) {
			return StringPool.BLANK;
		}
		else {
			return _folderName;
		}
	}

	@Override
	public void setFolderName(String folderName) {
		_folderName = folderName;
	}

	@JSON
	@Override
	public long getParentFolderId() {
		return _parentFolderId;
	}

	@Override
	public void setParentFolderId(long parentFolderId) {
		_parentFolderId = parentFolderId;
	}

	@JSON
	@Override
	public int getSequenceNo() {
		return _sequenceNo;
	}

	@Override
	public void setSequenceNo(int sequenceNo) {
		_sequenceNo = sequenceNo;
	}

	@JSON
	@Override
	public String getProcedureFilter() {
		if (_procedureFilter == null) {
			return StringPool.BLANK;
		}
		else {
			return _procedureFilter;
		}
	}

	@Override
	public void setProcedureFilter(String procedureFilter) {
		_procedureFilter = procedureFilter;
	}

	@JSON
	@Override
	public String getStatusFilter() {
		if (_statusFilter == null) {
			return StringPool.BLANK;
		}
		else {
			return _statusFilter;
		}
	}

	@Override
	public void setStatusFilter(String statusFilter) {
		_statusFilter = statusFilter;
	}

	@JSON
	@Override
	public int getFilterByOrganization() {
		return _filterByOrganization;
	}

	@Override
	public void setFilterByOrganization(int filterByOrganization) {
		_filterByOrganization = filterByOrganization;
	}

	@JSON
	@Override
	public int getFilterByUser() {
		return _filterByUser;
	}

	@Override
	public void setFilterByUser(int filterByUser) {
		_filterByUser = filterByUser;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(PortalUtil.getClassNameId(
				DossierFolder.class.getName()));
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			DossierFolder.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public DossierFolder toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (DossierFolder)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		DossierFolderImpl dossierFolderImpl = new DossierFolderImpl();

		dossierFolderImpl.setUuid(getUuid());
		dossierFolderImpl.setDossierFolderId(getDossierFolderId());
		dossierFolderImpl.setCompanyId(getCompanyId());
		dossierFolderImpl.setCreateDate(getCreateDate());
		dossierFolderImpl.setModifiedDate(getModifiedDate());
		dossierFolderImpl.setFolderName(getFolderName());
		dossierFolderImpl.setParentFolderId(getParentFolderId());
		dossierFolderImpl.setSequenceNo(getSequenceNo());
		dossierFolderImpl.setProcedureFilter(getProcedureFilter());
		dossierFolderImpl.setStatusFilter(getStatusFilter());
		dossierFolderImpl.setFilterByOrganization(getFilterByOrganization());
		dossierFolderImpl.setFilterByUser(getFilterByUser());

		dossierFolderImpl.resetOriginalValues();

		return dossierFolderImpl;
	}

	@Override
	public int compareTo(DossierFolder dossierFolder) {
		long primaryKey = dossierFolder.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof DossierFolder)) {
			return false;
		}

		DossierFolder dossierFolder = (DossierFolder)obj;

		long primaryKey = dossierFolder.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		DossierFolderModelImpl dossierFolderModelImpl = this;

		dossierFolderModelImpl._originalUuid = dossierFolderModelImpl._uuid;

		dossierFolderModelImpl._originalCompanyId = dossierFolderModelImpl._companyId;

		dossierFolderModelImpl._setOriginalCompanyId = false;

		dossierFolderModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<DossierFolder> toCacheModel() {
		DossierFolderCacheModel dossierFolderCacheModel = new DossierFolderCacheModel();

		dossierFolderCacheModel.uuid = getUuid();

		String uuid = dossierFolderCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			dossierFolderCacheModel.uuid = null;
		}

		dossierFolderCacheModel.dossierFolderId = getDossierFolderId();

		dossierFolderCacheModel.companyId = getCompanyId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			dossierFolderCacheModel.createDate = createDate.getTime();
		}
		else {
			dossierFolderCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			dossierFolderCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			dossierFolderCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		dossierFolderCacheModel.folderName = getFolderName();

		String folderName = dossierFolderCacheModel.folderName;

		if ((folderName != null) && (folderName.length() == 0)) {
			dossierFolderCacheModel.folderName = null;
		}

		dossierFolderCacheModel.parentFolderId = getParentFolderId();

		dossierFolderCacheModel.sequenceNo = getSequenceNo();

		dossierFolderCacheModel.procedureFilter = getProcedureFilter();

		String procedureFilter = dossierFolderCacheModel.procedureFilter;

		if ((procedureFilter != null) && (procedureFilter.length() == 0)) {
			dossierFolderCacheModel.procedureFilter = null;
		}

		dossierFolderCacheModel.statusFilter = getStatusFilter();

		String statusFilter = dossierFolderCacheModel.statusFilter;

		if ((statusFilter != null) && (statusFilter.length() == 0)) {
			dossierFolderCacheModel.statusFilter = null;
		}

		dossierFolderCacheModel.filterByOrganization = getFilterByOrganization();

		dossierFolderCacheModel.filterByUser = getFilterByUser();

		return dossierFolderCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(25);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", dossierFolderId=");
		sb.append(getDossierFolderId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", folderName=");
		sb.append(getFolderName());
		sb.append(", parentFolderId=");
		sb.append(getParentFolderId());
		sb.append(", sequenceNo=");
		sb.append(getSequenceNo());
		sb.append(", procedureFilter=");
		sb.append(getProcedureFilter());
		sb.append(", statusFilter=");
		sb.append(getStatusFilter());
		sb.append(", filterByOrganization=");
		sb.append(getFilterByOrganization());
		sb.append(", filterByUser=");
		sb.append(getFilterByUser());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(40);

		sb.append("<model><model-name>");
		sb.append("org.oep.core.dossiermgt.model.DossierFolder");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dossierFolderId</column-name><column-value><![CDATA[");
		sb.append(getDossierFolderId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>folderName</column-name><column-value><![CDATA[");
		sb.append(getFolderName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>parentFolderId</column-name><column-value><![CDATA[");
		sb.append(getParentFolderId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sequenceNo</column-name><column-value><![CDATA[");
		sb.append(getSequenceNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>procedureFilter</column-name><column-value><![CDATA[");
		sb.append(getProcedureFilter());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statusFilter</column-name><column-value><![CDATA[");
		sb.append(getStatusFilter());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>filterByOrganization</column-name><column-value><![CDATA[");
		sb.append(getFilterByOrganization());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>filterByUser</column-name><column-value><![CDATA[");
		sb.append(getFilterByUser());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = DossierFolder.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			DossierFolder.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _dossierFolderId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private Date _createDate;
	private Date _modifiedDate;
	private String _folderName;
	private long _parentFolderId;
	private int _sequenceNo;
	private String _procedureFilter;
	private String _statusFilter;
	private int _filterByOrganization;
	private int _filterByUser;
	private long _columnBitmask;
	private DossierFolder _escapedModel;
}