/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.oep.core.dossiermgt.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import org.oep.core.dossiermgt.model.EbMessage;
import org.oep.core.dossiermgt.model.EbMessageModel;
import org.oep.core.dossiermgt.model.EbMessageSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the EbMessage service. Represents a row in the &quot;oep_dossiermgt_ebmessage&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link org.oep.core.dossiermgt.model.EbMessageModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link EbMessageImpl}.
 * </p>
 *
 * @author trungdk
 * @see EbMessageImpl
 * @see org.oep.core.dossiermgt.model.EbMessage
 * @see org.oep.core.dossiermgt.model.EbMessageModel
 * @generated
 */
@JSON(strict = true)
public class EbMessageModelImpl extends BaseModelImpl<EbMessage>
	implements EbMessageModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a eb message model instance should use the {@link org.oep.core.dossiermgt.model.EbMessage} interface instead.
	 */
	public static final String TABLE_NAME = "oep_dossiermgt_ebmessage";
	public static final Object[][] TABLE_COLUMNS = {
			{ "ebMessageId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "createDate", Types.TIMESTAMP },
			{ "messageId", Types.VARCHAR },
			{ "cpaId", Types.VARCHAR },
			{ "service", Types.VARCHAR },
			{ "action", Types.VARCHAR },
			{ "conversationId", Types.VARCHAR },
			{ "fromPartyId", Types.VARCHAR },
			{ "fromPartyType", Types.VARCHAR },
			{ "toPartyId", Types.VARCHAR },
			{ "toPartyType", Types.VARCHAR },
			{ "refToMessageId", Types.VARCHAR },
			{ "status", Types.VARCHAR },
			{ "statusDescription", Types.VARCHAR },
			{ "ackMessageId", Types.VARCHAR },
			{ "ackStatus", Types.VARCHAR },
			{ "ackStatusDescription", Types.VARCHAR },
			{ "messageDescription", Types.VARCHAR },
			{ "inbound", Types.INTEGER }
		};
	public static final String TABLE_SQL_CREATE = "create table oep_dossiermgt_ebmessage (ebMessageId LONG not null primary key,companyId LONG,createDate DATE null,messageId VARCHAR(100) null,cpaId VARCHAR(100) null,service VARCHAR(100) null,action VARCHAR(100) null,conversationId VARCHAR(100) null,fromPartyId VARCHAR(100) null,fromPartyType VARCHAR(100) null,toPartyId VARCHAR(100) null,toPartyType VARCHAR(100) null,refToMessageId VARCHAR(100) null,status VARCHAR(100) null,statusDescription VARCHAR(100) null,ackMessageId VARCHAR(100) null,ackStatus VARCHAR(100) null,ackStatusDescription VARCHAR(100) null,messageDescription VARCHAR(200) null,inbound INTEGER)";
	public static final String TABLE_SQL_DROP = "drop table oep_dossiermgt_ebmessage";
	public static final String ORDER_BY_JPQL = " ORDER BY ebMessage.ebMessageId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY oep_dossiermgt_ebmessage.ebMessageId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.org.oep.core.dossiermgt.model.EbMessage"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.org.oep.core.dossiermgt.model.EbMessage"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static EbMessage toModel(EbMessageSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		EbMessage model = new EbMessageImpl();

		model.setEbMessageId(soapModel.getEbMessageId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setCreateDate(soapModel.getCreateDate());
		model.setMessageId(soapModel.getMessageId());
		model.setCpaId(soapModel.getCpaId());
		model.setService(soapModel.getService());
		model.setAction(soapModel.getAction());
		model.setConversationId(soapModel.getConversationId());
		model.setFromPartyId(soapModel.getFromPartyId());
		model.setFromPartyType(soapModel.getFromPartyType());
		model.setToPartyId(soapModel.getToPartyId());
		model.setToPartyType(soapModel.getToPartyType());
		model.setRefToMessageId(soapModel.getRefToMessageId());
		model.setStatus(soapModel.getStatus());
		model.setStatusDescription(soapModel.getStatusDescription());
		model.setAckMessageId(soapModel.getAckMessageId());
		model.setAckStatus(soapModel.getAckStatus());
		model.setAckStatusDescription(soapModel.getAckStatusDescription());
		model.setMessageDescription(soapModel.getMessageDescription());
		model.setInbound(soapModel.getInbound());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<EbMessage> toModels(EbMessageSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<EbMessage> models = new ArrayList<EbMessage>(soapModels.length);

		for (EbMessageSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.org.oep.core.dossiermgt.model.EbMessage"));

	public EbMessageModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _ebMessageId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setEbMessageId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _ebMessageId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return EbMessage.class;
	}

	@Override
	public String getModelClassName() {
		return EbMessage.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("ebMessageId", getEbMessageId());
		attributes.put("companyId", getCompanyId());
		attributes.put("createDate", getCreateDate());
		attributes.put("messageId", getMessageId());
		attributes.put("cpaId", getCpaId());
		attributes.put("service", getService());
		attributes.put("action", getAction());
		attributes.put("conversationId", getConversationId());
		attributes.put("fromPartyId", getFromPartyId());
		attributes.put("fromPartyType", getFromPartyType());
		attributes.put("toPartyId", getToPartyId());
		attributes.put("toPartyType", getToPartyType());
		attributes.put("refToMessageId", getRefToMessageId());
		attributes.put("status", getStatus());
		attributes.put("statusDescription", getStatusDescription());
		attributes.put("ackMessageId", getAckMessageId());
		attributes.put("ackStatus", getAckStatus());
		attributes.put("ackStatusDescription", getAckStatusDescription());
		attributes.put("messageDescription", getMessageDescription());
		attributes.put("inbound", getInbound());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long ebMessageId = (Long)attributes.get("ebMessageId");

		if (ebMessageId != null) {
			setEbMessageId(ebMessageId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		String messageId = (String)attributes.get("messageId");

		if (messageId != null) {
			setMessageId(messageId);
		}

		String cpaId = (String)attributes.get("cpaId");

		if (cpaId != null) {
			setCpaId(cpaId);
		}

		String service = (String)attributes.get("service");

		if (service != null) {
			setService(service);
		}

		String action = (String)attributes.get("action");

		if (action != null) {
			setAction(action);
		}

		String conversationId = (String)attributes.get("conversationId");

		if (conversationId != null) {
			setConversationId(conversationId);
		}

		String fromPartyId = (String)attributes.get("fromPartyId");

		if (fromPartyId != null) {
			setFromPartyId(fromPartyId);
		}

		String fromPartyType = (String)attributes.get("fromPartyType");

		if (fromPartyType != null) {
			setFromPartyType(fromPartyType);
		}

		String toPartyId = (String)attributes.get("toPartyId");

		if (toPartyId != null) {
			setToPartyId(toPartyId);
		}

		String toPartyType = (String)attributes.get("toPartyType");

		if (toPartyType != null) {
			setToPartyType(toPartyType);
		}

		String refToMessageId = (String)attributes.get("refToMessageId");

		if (refToMessageId != null) {
			setRefToMessageId(refToMessageId);
		}

		String status = (String)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}

		String statusDescription = (String)attributes.get("statusDescription");

		if (statusDescription != null) {
			setStatusDescription(statusDescription);
		}

		String ackMessageId = (String)attributes.get("ackMessageId");

		if (ackMessageId != null) {
			setAckMessageId(ackMessageId);
		}

		String ackStatus = (String)attributes.get("ackStatus");

		if (ackStatus != null) {
			setAckStatus(ackStatus);
		}

		String ackStatusDescription = (String)attributes.get(
				"ackStatusDescription");

		if (ackStatusDescription != null) {
			setAckStatusDescription(ackStatusDescription);
		}

		String messageDescription = (String)attributes.get("messageDescription");

		if (messageDescription != null) {
			setMessageDescription(messageDescription);
		}

		Integer inbound = (Integer)attributes.get("inbound");

		if (inbound != null) {
			setInbound(inbound);
		}
	}

	@JSON
	@Override
	public long getEbMessageId() {
		return _ebMessageId;
	}

	@Override
	public void setEbMessageId(long ebMessageId) {
		_ebMessageId = ebMessageId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public String getMessageId() {
		if (_messageId == null) {
			return StringPool.BLANK;
		}
		else {
			return _messageId;
		}
	}

	@Override
	public void setMessageId(String messageId) {
		_messageId = messageId;
	}

	@JSON
	@Override
	public String getCpaId() {
		if (_cpaId == null) {
			return StringPool.BLANK;
		}
		else {
			return _cpaId;
		}
	}

	@Override
	public void setCpaId(String cpaId) {
		_cpaId = cpaId;
	}

	@JSON
	@Override
	public String getService() {
		if (_service == null) {
			return StringPool.BLANK;
		}
		else {
			return _service;
		}
	}

	@Override
	public void setService(String service) {
		_service = service;
	}

	@JSON
	@Override
	public String getAction() {
		if (_action == null) {
			return StringPool.BLANK;
		}
		else {
			return _action;
		}
	}

	@Override
	public void setAction(String action) {
		_action = action;
	}

	@JSON
	@Override
	public String getConversationId() {
		if (_conversationId == null) {
			return StringPool.BLANK;
		}
		else {
			return _conversationId;
		}
	}

	@Override
	public void setConversationId(String conversationId) {
		_conversationId = conversationId;
	}

	@JSON
	@Override
	public String getFromPartyId() {
		if (_fromPartyId == null) {
			return StringPool.BLANK;
		}
		else {
			return _fromPartyId;
		}
	}

	@Override
	public void setFromPartyId(String fromPartyId) {
		_fromPartyId = fromPartyId;
	}

	@JSON
	@Override
	public String getFromPartyType() {
		if (_fromPartyType == null) {
			return StringPool.BLANK;
		}
		else {
			return _fromPartyType;
		}
	}

	@Override
	public void setFromPartyType(String fromPartyType) {
		_fromPartyType = fromPartyType;
	}

	@JSON
	@Override
	public String getToPartyId() {
		if (_toPartyId == null) {
			return StringPool.BLANK;
		}
		else {
			return _toPartyId;
		}
	}

	@Override
	public void setToPartyId(String toPartyId) {
		_toPartyId = toPartyId;
	}

	@JSON
	@Override
	public String getToPartyType() {
		if (_toPartyType == null) {
			return StringPool.BLANK;
		}
		else {
			return _toPartyType;
		}
	}

	@Override
	public void setToPartyType(String toPartyType) {
		_toPartyType = toPartyType;
	}

	@JSON
	@Override
	public String getRefToMessageId() {
		if (_refToMessageId == null) {
			return StringPool.BLANK;
		}
		else {
			return _refToMessageId;
		}
	}

	@Override
	public void setRefToMessageId(String refToMessageId) {
		_refToMessageId = refToMessageId;
	}

	@JSON
	@Override
	public String getStatus() {
		if (_status == null) {
			return StringPool.BLANK;
		}
		else {
			return _status;
		}
	}

	@Override
	public void setStatus(String status) {
		_status = status;
	}

	@JSON
	@Override
	public String getStatusDescription() {
		if (_statusDescription == null) {
			return StringPool.BLANK;
		}
		else {
			return _statusDescription;
		}
	}

	@Override
	public void setStatusDescription(String statusDescription) {
		_statusDescription = statusDescription;
	}

	@JSON
	@Override
	public String getAckMessageId() {
		if (_ackMessageId == null) {
			return StringPool.BLANK;
		}
		else {
			return _ackMessageId;
		}
	}

	@Override
	public void setAckMessageId(String ackMessageId) {
		_ackMessageId = ackMessageId;
	}

	@JSON
	@Override
	public String getAckStatus() {
		if (_ackStatus == null) {
			return StringPool.BLANK;
		}
		else {
			return _ackStatus;
		}
	}

	@Override
	public void setAckStatus(String ackStatus) {
		_ackStatus = ackStatus;
	}

	@JSON
	@Override
	public String getAckStatusDescription() {
		if (_ackStatusDescription == null) {
			return StringPool.BLANK;
		}
		else {
			return _ackStatusDescription;
		}
	}

	@Override
	public void setAckStatusDescription(String ackStatusDescription) {
		_ackStatusDescription = ackStatusDescription;
	}

	@JSON
	@Override
	public String getMessageDescription() {
		if (_messageDescription == null) {
			return StringPool.BLANK;
		}
		else {
			return _messageDescription;
		}
	}

	@Override
	public void setMessageDescription(String messageDescription) {
		_messageDescription = messageDescription;
	}

	@JSON
	@Override
	public int getInbound() {
		return _inbound;
	}

	@Override
	public void setInbound(int inbound) {
		_inbound = inbound;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			EbMessage.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public EbMessage toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (EbMessage)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		EbMessageImpl ebMessageImpl = new EbMessageImpl();

		ebMessageImpl.setEbMessageId(getEbMessageId());
		ebMessageImpl.setCompanyId(getCompanyId());
		ebMessageImpl.setCreateDate(getCreateDate());
		ebMessageImpl.setMessageId(getMessageId());
		ebMessageImpl.setCpaId(getCpaId());
		ebMessageImpl.setService(getService());
		ebMessageImpl.setAction(getAction());
		ebMessageImpl.setConversationId(getConversationId());
		ebMessageImpl.setFromPartyId(getFromPartyId());
		ebMessageImpl.setFromPartyType(getFromPartyType());
		ebMessageImpl.setToPartyId(getToPartyId());
		ebMessageImpl.setToPartyType(getToPartyType());
		ebMessageImpl.setRefToMessageId(getRefToMessageId());
		ebMessageImpl.setStatus(getStatus());
		ebMessageImpl.setStatusDescription(getStatusDescription());
		ebMessageImpl.setAckMessageId(getAckMessageId());
		ebMessageImpl.setAckStatus(getAckStatus());
		ebMessageImpl.setAckStatusDescription(getAckStatusDescription());
		ebMessageImpl.setMessageDescription(getMessageDescription());
		ebMessageImpl.setInbound(getInbound());

		ebMessageImpl.resetOriginalValues();

		return ebMessageImpl;
	}

	@Override
	public int compareTo(EbMessage ebMessage) {
		long primaryKey = ebMessage.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof EbMessage)) {
			return false;
		}

		EbMessage ebMessage = (EbMessage)obj;

		long primaryKey = ebMessage.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<EbMessage> toCacheModel() {
		EbMessageCacheModel ebMessageCacheModel = new EbMessageCacheModel();

		ebMessageCacheModel.ebMessageId = getEbMessageId();

		ebMessageCacheModel.companyId = getCompanyId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			ebMessageCacheModel.createDate = createDate.getTime();
		}
		else {
			ebMessageCacheModel.createDate = Long.MIN_VALUE;
		}

		ebMessageCacheModel.messageId = getMessageId();

		String messageId = ebMessageCacheModel.messageId;

		if ((messageId != null) && (messageId.length() == 0)) {
			ebMessageCacheModel.messageId = null;
		}

		ebMessageCacheModel.cpaId = getCpaId();

		String cpaId = ebMessageCacheModel.cpaId;

		if ((cpaId != null) && (cpaId.length() == 0)) {
			ebMessageCacheModel.cpaId = null;
		}

		ebMessageCacheModel.service = getService();

		String service = ebMessageCacheModel.service;

		if ((service != null) && (service.length() == 0)) {
			ebMessageCacheModel.service = null;
		}

		ebMessageCacheModel.action = getAction();

		String action = ebMessageCacheModel.action;

		if ((action != null) && (action.length() == 0)) {
			ebMessageCacheModel.action = null;
		}

		ebMessageCacheModel.conversationId = getConversationId();

		String conversationId = ebMessageCacheModel.conversationId;

		if ((conversationId != null) && (conversationId.length() == 0)) {
			ebMessageCacheModel.conversationId = null;
		}

		ebMessageCacheModel.fromPartyId = getFromPartyId();

		String fromPartyId = ebMessageCacheModel.fromPartyId;

		if ((fromPartyId != null) && (fromPartyId.length() == 0)) {
			ebMessageCacheModel.fromPartyId = null;
		}

		ebMessageCacheModel.fromPartyType = getFromPartyType();

		String fromPartyType = ebMessageCacheModel.fromPartyType;

		if ((fromPartyType != null) && (fromPartyType.length() == 0)) {
			ebMessageCacheModel.fromPartyType = null;
		}

		ebMessageCacheModel.toPartyId = getToPartyId();

		String toPartyId = ebMessageCacheModel.toPartyId;

		if ((toPartyId != null) && (toPartyId.length() == 0)) {
			ebMessageCacheModel.toPartyId = null;
		}

		ebMessageCacheModel.toPartyType = getToPartyType();

		String toPartyType = ebMessageCacheModel.toPartyType;

		if ((toPartyType != null) && (toPartyType.length() == 0)) {
			ebMessageCacheModel.toPartyType = null;
		}

		ebMessageCacheModel.refToMessageId = getRefToMessageId();

		String refToMessageId = ebMessageCacheModel.refToMessageId;

		if ((refToMessageId != null) && (refToMessageId.length() == 0)) {
			ebMessageCacheModel.refToMessageId = null;
		}

		ebMessageCacheModel.status = getStatus();

		String status = ebMessageCacheModel.status;

		if ((status != null) && (status.length() == 0)) {
			ebMessageCacheModel.status = null;
		}

		ebMessageCacheModel.statusDescription = getStatusDescription();

		String statusDescription = ebMessageCacheModel.statusDescription;

		if ((statusDescription != null) && (statusDescription.length() == 0)) {
			ebMessageCacheModel.statusDescription = null;
		}

		ebMessageCacheModel.ackMessageId = getAckMessageId();

		String ackMessageId = ebMessageCacheModel.ackMessageId;

		if ((ackMessageId != null) && (ackMessageId.length() == 0)) {
			ebMessageCacheModel.ackMessageId = null;
		}

		ebMessageCacheModel.ackStatus = getAckStatus();

		String ackStatus = ebMessageCacheModel.ackStatus;

		if ((ackStatus != null) && (ackStatus.length() == 0)) {
			ebMessageCacheModel.ackStatus = null;
		}

		ebMessageCacheModel.ackStatusDescription = getAckStatusDescription();

		String ackStatusDescription = ebMessageCacheModel.ackStatusDescription;

		if ((ackStatusDescription != null) &&
				(ackStatusDescription.length() == 0)) {
			ebMessageCacheModel.ackStatusDescription = null;
		}

		ebMessageCacheModel.messageDescription = getMessageDescription();

		String messageDescription = ebMessageCacheModel.messageDescription;

		if ((messageDescription != null) && (messageDescription.length() == 0)) {
			ebMessageCacheModel.messageDescription = null;
		}

		ebMessageCacheModel.inbound = getInbound();

		return ebMessageCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(41);

		sb.append("{ebMessageId=");
		sb.append(getEbMessageId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", messageId=");
		sb.append(getMessageId());
		sb.append(", cpaId=");
		sb.append(getCpaId());
		sb.append(", service=");
		sb.append(getService());
		sb.append(", action=");
		sb.append(getAction());
		sb.append(", conversationId=");
		sb.append(getConversationId());
		sb.append(", fromPartyId=");
		sb.append(getFromPartyId());
		sb.append(", fromPartyType=");
		sb.append(getFromPartyType());
		sb.append(", toPartyId=");
		sb.append(getToPartyId());
		sb.append(", toPartyType=");
		sb.append(getToPartyType());
		sb.append(", refToMessageId=");
		sb.append(getRefToMessageId());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append(", statusDescription=");
		sb.append(getStatusDescription());
		sb.append(", ackMessageId=");
		sb.append(getAckMessageId());
		sb.append(", ackStatus=");
		sb.append(getAckStatus());
		sb.append(", ackStatusDescription=");
		sb.append(getAckStatusDescription());
		sb.append(", messageDescription=");
		sb.append(getMessageDescription());
		sb.append(", inbound=");
		sb.append(getInbound());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(64);

		sb.append("<model><model-name>");
		sb.append("org.oep.core.dossiermgt.model.EbMessage");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>ebMessageId</column-name><column-value><![CDATA[");
		sb.append(getEbMessageId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>messageId</column-name><column-value><![CDATA[");
		sb.append(getMessageId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>cpaId</column-name><column-value><![CDATA[");
		sb.append(getCpaId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>service</column-name><column-value><![CDATA[");
		sb.append(getService());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>action</column-name><column-value><![CDATA[");
		sb.append(getAction());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>conversationId</column-name><column-value><![CDATA[");
		sb.append(getConversationId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fromPartyId</column-name><column-value><![CDATA[");
		sb.append(getFromPartyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fromPartyType</column-name><column-value><![CDATA[");
		sb.append(getFromPartyType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>toPartyId</column-name><column-value><![CDATA[");
		sb.append(getToPartyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>toPartyType</column-name><column-value><![CDATA[");
		sb.append(getToPartyType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>refToMessageId</column-name><column-value><![CDATA[");
		sb.append(getRefToMessageId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statusDescription</column-name><column-value><![CDATA[");
		sb.append(getStatusDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ackMessageId</column-name><column-value><![CDATA[");
		sb.append(getAckMessageId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ackStatus</column-name><column-value><![CDATA[");
		sb.append(getAckStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ackStatusDescription</column-name><column-value><![CDATA[");
		sb.append(getAckStatusDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>messageDescription</column-name><column-value><![CDATA[");
		sb.append(getMessageDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>inbound</column-name><column-value><![CDATA[");
		sb.append(getInbound());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = EbMessage.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			EbMessage.class
		};
	private long _ebMessageId;
	private long _companyId;
	private Date _createDate;
	private String _messageId;
	private String _cpaId;
	private String _service;
	private String _action;
	private String _conversationId;
	private String _fromPartyId;
	private String _fromPartyType;
	private String _toPartyId;
	private String _toPartyType;
	private String _refToMessageId;
	private String _status;
	private String _statusDescription;
	private String _ackMessageId;
	private String _ackStatus;
	private String _ackStatusDescription;
	private String _messageDescription;
	private int _inbound;
	private EbMessage _escapedModel;
}