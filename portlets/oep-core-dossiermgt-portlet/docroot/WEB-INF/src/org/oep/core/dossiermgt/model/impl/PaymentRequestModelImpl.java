/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.oep.core.dossiermgt.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.lar.StagedModelType;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import org.oep.core.dossiermgt.model.PaymentRequest;
import org.oep.core.dossiermgt.model.PaymentRequestModel;
import org.oep.core.dossiermgt.model.PaymentRequestSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the PaymentRequest service. Represents a row in the &quot;oep_dossiermgt_PaymentRequest&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link org.oep.core.dossiermgt.model.PaymentRequestModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PaymentRequestImpl}.
 * </p>
 *
 * @author trungdk
 * @see PaymentRequestImpl
 * @see org.oep.core.dossiermgt.model.PaymentRequest
 * @see org.oep.core.dossiermgt.model.PaymentRequestModel
 * @generated
 */
@JSON(strict = true)
public class PaymentRequestModelImpl extends BaseModelImpl<PaymentRequest>
	implements PaymentRequestModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a payment request model instance should use the {@link org.oep.core.dossiermgt.model.PaymentRequest} interface instead.
	 */
	public static final String TABLE_NAME = "oep_dossiermgt_PaymentRequest";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "paymentRequestId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "organizationId", Types.BIGINT },
			{ "dossierId", Types.BIGINT },
			{ "amount", Types.BIGINT },
			{ "note", Types.VARCHAR },
			{ "issueDate", Types.TIMESTAMP },
			{ "paymentFileId", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table oep_dossiermgt_PaymentRequest (uuid_ VARCHAR(75) null,paymentRequestId LONG not null primary key,userId LONG,groupId LONG,companyId LONG,createDate DATE null,modifiedDate DATE null,organizationId LONG,dossierId LONG,amount LONG,note VARCHAR(75) null,issueDate DATE null,paymentFileId LONG)";
	public static final String TABLE_SQL_DROP = "drop table oep_dossiermgt_PaymentRequest";
	public static final String ORDER_BY_JPQL = " ORDER BY paymentRequest.paymentRequestId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY oep_dossiermgt_PaymentRequest.paymentRequestId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.org.oep.core.dossiermgt.model.PaymentRequest"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.org.oep.core.dossiermgt.model.PaymentRequest"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.org.oep.core.dossiermgt.model.PaymentRequest"),
			true);
	public static long COMPANYID_COLUMN_BITMASK = 1L;
	public static long GROUPID_COLUMN_BITMASK = 2L;
	public static long UUID_COLUMN_BITMASK = 4L;
	public static long PAYMENTREQUESTID_COLUMN_BITMASK = 8L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static PaymentRequest toModel(PaymentRequestSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		PaymentRequest model = new PaymentRequestImpl();

		model.setUuid(soapModel.getUuid());
		model.setPaymentRequestId(soapModel.getPaymentRequestId());
		model.setUserId(soapModel.getUserId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setOrganizationId(soapModel.getOrganizationId());
		model.setDossierId(soapModel.getDossierId());
		model.setAmount(soapModel.getAmount());
		model.setNote(soapModel.getNote());
		model.setIssueDate(soapModel.getIssueDate());
		model.setPaymentFileId(soapModel.getPaymentFileId());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<PaymentRequest> toModels(PaymentRequestSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<PaymentRequest> models = new ArrayList<PaymentRequest>(soapModels.length);

		for (PaymentRequestSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.org.oep.core.dossiermgt.model.PaymentRequest"));

	public PaymentRequestModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _paymentRequestId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setPaymentRequestId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _paymentRequestId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return PaymentRequest.class;
	}

	@Override
	public String getModelClassName() {
		return PaymentRequest.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("paymentRequestId", getPaymentRequestId());
		attributes.put("userId", getUserId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("organizationId", getOrganizationId());
		attributes.put("dossierId", getDossierId());
		attributes.put("amount", getAmount());
		attributes.put("note", getNote());
		attributes.put("issueDate", getIssueDate());
		attributes.put("paymentFileId", getPaymentFileId());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long paymentRequestId = (Long)attributes.get("paymentRequestId");

		if (paymentRequestId != null) {
			setPaymentRequestId(paymentRequestId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Long organizationId = (Long)attributes.get("organizationId");

		if (organizationId != null) {
			setOrganizationId(organizationId);
		}

		Long dossierId = (Long)attributes.get("dossierId");

		if (dossierId != null) {
			setDossierId(dossierId);
		}

		Long amount = (Long)attributes.get("amount");

		if (amount != null) {
			setAmount(amount);
		}

		String note = (String)attributes.get("note");

		if (note != null) {
			setNote(note);
		}

		Date issueDate = (Date)attributes.get("issueDate");

		if (issueDate != null) {
			setIssueDate(issueDate);
		}

		Long paymentFileId = (Long)attributes.get("paymentFileId");

		if (paymentFileId != null) {
			setPaymentFileId(paymentFileId);
		}
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getPaymentRequestId() {
		return _paymentRequestId;
	}

	@Override
	public void setPaymentRequestId(long paymentRequestId) {
		_paymentRequestId = paymentRequestId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public long getOrganizationId() {
		return _organizationId;
	}

	@Override
	public void setOrganizationId(long organizationId) {
		_organizationId = organizationId;
	}

	@JSON
	@Override
	public long getDossierId() {
		return _dossierId;
	}

	@Override
	public void setDossierId(long dossierId) {
		_dossierId = dossierId;
	}

	@JSON
	@Override
	public long getAmount() {
		return _amount;
	}

	@Override
	public void setAmount(long amount) {
		_amount = amount;
	}

	@JSON
	@Override
	public String getNote() {
		if (_note == null) {
			return StringPool.BLANK;
		}
		else {
			return _note;
		}
	}

	@Override
	public void setNote(String note) {
		_note = note;
	}

	@JSON
	@Override
	public Date getIssueDate() {
		return _issueDate;
	}

	@Override
	public void setIssueDate(Date issueDate) {
		_issueDate = issueDate;
	}

	@JSON
	@Override
	public long getPaymentFileId() {
		return _paymentFileId;
	}

	@Override
	public void setPaymentFileId(long paymentFileId) {
		_paymentFileId = paymentFileId;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(PortalUtil.getClassNameId(
				PaymentRequest.class.getName()));
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			PaymentRequest.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public PaymentRequest toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (PaymentRequest)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		PaymentRequestImpl paymentRequestImpl = new PaymentRequestImpl();

		paymentRequestImpl.setUuid(getUuid());
		paymentRequestImpl.setPaymentRequestId(getPaymentRequestId());
		paymentRequestImpl.setUserId(getUserId());
		paymentRequestImpl.setGroupId(getGroupId());
		paymentRequestImpl.setCompanyId(getCompanyId());
		paymentRequestImpl.setCreateDate(getCreateDate());
		paymentRequestImpl.setModifiedDate(getModifiedDate());
		paymentRequestImpl.setOrganizationId(getOrganizationId());
		paymentRequestImpl.setDossierId(getDossierId());
		paymentRequestImpl.setAmount(getAmount());
		paymentRequestImpl.setNote(getNote());
		paymentRequestImpl.setIssueDate(getIssueDate());
		paymentRequestImpl.setPaymentFileId(getPaymentFileId());

		paymentRequestImpl.resetOriginalValues();

		return paymentRequestImpl;
	}

	@Override
	public int compareTo(PaymentRequest paymentRequest) {
		long primaryKey = paymentRequest.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof PaymentRequest)) {
			return false;
		}

		PaymentRequest paymentRequest = (PaymentRequest)obj;

		long primaryKey = paymentRequest.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		PaymentRequestModelImpl paymentRequestModelImpl = this;

		paymentRequestModelImpl._originalUuid = paymentRequestModelImpl._uuid;

		paymentRequestModelImpl._originalGroupId = paymentRequestModelImpl._groupId;

		paymentRequestModelImpl._setOriginalGroupId = false;

		paymentRequestModelImpl._originalCompanyId = paymentRequestModelImpl._companyId;

		paymentRequestModelImpl._setOriginalCompanyId = false;

		paymentRequestModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<PaymentRequest> toCacheModel() {
		PaymentRequestCacheModel paymentRequestCacheModel = new PaymentRequestCacheModel();

		paymentRequestCacheModel.uuid = getUuid();

		String uuid = paymentRequestCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			paymentRequestCacheModel.uuid = null;
		}

		paymentRequestCacheModel.paymentRequestId = getPaymentRequestId();

		paymentRequestCacheModel.userId = getUserId();

		paymentRequestCacheModel.groupId = getGroupId();

		paymentRequestCacheModel.companyId = getCompanyId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			paymentRequestCacheModel.createDate = createDate.getTime();
		}
		else {
			paymentRequestCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			paymentRequestCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			paymentRequestCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		paymentRequestCacheModel.organizationId = getOrganizationId();

		paymentRequestCacheModel.dossierId = getDossierId();

		paymentRequestCacheModel.amount = getAmount();

		paymentRequestCacheModel.note = getNote();

		String note = paymentRequestCacheModel.note;

		if ((note != null) && (note.length() == 0)) {
			paymentRequestCacheModel.note = null;
		}

		Date issueDate = getIssueDate();

		if (issueDate != null) {
			paymentRequestCacheModel.issueDate = issueDate.getTime();
		}
		else {
			paymentRequestCacheModel.issueDate = Long.MIN_VALUE;
		}

		paymentRequestCacheModel.paymentFileId = getPaymentFileId();

		return paymentRequestCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(27);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", paymentRequestId=");
		sb.append(getPaymentRequestId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", organizationId=");
		sb.append(getOrganizationId());
		sb.append(", dossierId=");
		sb.append(getDossierId());
		sb.append(", amount=");
		sb.append(getAmount());
		sb.append(", note=");
		sb.append(getNote());
		sb.append(", issueDate=");
		sb.append(getIssueDate());
		sb.append(", paymentFileId=");
		sb.append(getPaymentFileId());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(43);

		sb.append("<model><model-name>");
		sb.append("org.oep.core.dossiermgt.model.PaymentRequest");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>paymentRequestId</column-name><column-value><![CDATA[");
		sb.append(getPaymentRequestId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>organizationId</column-name><column-value><![CDATA[");
		sb.append(getOrganizationId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dossierId</column-name><column-value><![CDATA[");
		sb.append(getDossierId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>amount</column-name><column-value><![CDATA[");
		sb.append(getAmount());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>note</column-name><column-value><![CDATA[");
		sb.append(getNote());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>issueDate</column-name><column-value><![CDATA[");
		sb.append(getIssueDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>paymentFileId</column-name><column-value><![CDATA[");
		sb.append(getPaymentFileId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = PaymentRequest.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			PaymentRequest.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _paymentRequestId;
	private long _userId;
	private String _userUuid;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private Date _createDate;
	private Date _modifiedDate;
	private long _organizationId;
	private long _dossierId;
	private long _amount;
	private String _note;
	private Date _issueDate;
	private long _paymentFileId;
	private long _columnBitmask;
	private PaymentRequest _escapedModel;
}